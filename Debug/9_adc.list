
9_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015bc  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080016fc  080016fc  000116fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080017ac  080017ac  000117ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080017b0  080017b0  000117b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000064  20000004  080017b4  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000034  20000068  08001818  00020068  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2000009c  08001818  0002009c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  9 .debug_info   00001f3c  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000070a  00000000  00000000  00021fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000001b0  00000000  00000000  000226e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000148  00000000  00000000  00022890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00016c65  00000000  00000000  000229d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00002385  00000000  00000000  0003963d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0007c3ee  00000000  00000000  0003b9c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  000b7db0  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000cdc  00000000  00000000  000b7e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000068 	.word	0x20000068
 800015c:	00000000 	.word	0x00000000
 8000160:	080016e4 	.word	0x080016e4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000006c 	.word	0x2000006c
 800017c:	080016e4 	.word	0x080016e4

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <pc0_adc_init>:
#define ADC_EN		(1U<<0)
#define ADC_CR_START	(1U<<2)	//on ADC_CR
#define ADC_EOC		(1U<<2) //on ADC_ISR


void pc0_adc_init(void){
 8000220:	b480      	push	{r7}
 8000222:	af00      	add	r7, sp, #0


	//disable adc en
	ADC1->CR &= ~(ADC_EN);
 8000224:	4b30      	ldr	r3, [pc, #192]	; (80002e8 <pc0_adc_init+0xc8>)
 8000226:	689b      	ldr	r3, [r3, #8]
 8000228:	4a2f      	ldr	r2, [pc, #188]	; (80002e8 <pc0_adc_init+0xc8>)
 800022a:	f023 0301 	bic.w	r3, r3, #1
 800022e:	6093      	str	r3, [r2, #8]

	//enable clock access GPIOC pin
	RCC->AHB2ENR |= GPIOCEN;
 8000230:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000236:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800023a:	f043 0304 	orr.w	r3, r3, #4
 800023e:	64d3      	str	r3, [r2, #76]	; 0x4c
	//configure ADC module
	//select HSI16 as sysclk source?? ck this pg 225 ref manual. not sure!!!!
	// also chk RCC_CFGR->MCOSEL

	//2.5 adc is deep power down mode by default, lets exit that... (ref man p.423)
		ADC1->CR &= ~(ADC_CR_DEEPPWD); //this belongs in adc.c
 8000240:	4b29      	ldr	r3, [pc, #164]	; (80002e8 <pc0_adc_init+0xc8>)
 8000242:	689b      	ldr	r3, [r3, #8]
 8000244:	4a28      	ldr	r2, [pc, #160]	; (80002e8 <pc0_adc_init+0xc8>)
 8000246:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800024a:	6093      	str	r3, [r2, #8]
		// vr enable
		ADC1->CR |= ADC_CR_ADVREGEN; //this belongs in adc.c
 800024c:	4b26      	ldr	r3, [pc, #152]	; (80002e8 <pc0_adc_init+0xc8>)
 800024e:	689b      	ldr	r3, [r3, #8]
 8000250:	4a25      	ldr	r2, [pc, #148]	; (80002e8 <pc0_adc_init+0xc8>)
 8000252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000256:	6093      	str	r3, [r2, #8]
	//RCC->AHB2ENR |= ADC1EN;

	//enable pll  RCC_PLLCFGR ???? rm 1531

	// select pllsai1rclk as adc clock
	RCC->CCIPR |= RCC_CCIPR_ADCSEL_0; 	//chk this: 01: PLLSAI1 “R” clock (PLLSAI1RCLK) selected as ADC clock
 8000258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800025c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000260:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000268:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88


	//set PC0 to analog mode GPIOC MODER
	GPIOC->MODER |= (1U<<0);
 800026c:	4b1f      	ldr	r3, [pc, #124]	; (80002ec <pc0_adc_init+0xcc>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a1e      	ldr	r2, [pc, #120]	; (80002ec <pc0_adc_init+0xcc>)
 8000272:	f043 0301 	orr.w	r3, r3, #1
 8000276:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (1U<<1);
 8000278:	4b1c      	ldr	r3, [pc, #112]	; (80002ec <pc0_adc_init+0xcc>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a1b      	ldr	r2, [pc, #108]	; (80002ec <pc0_adc_init+0xcc>)
 800027e:	f043 0302 	orr.w	r3, r3, #2
 8000282:	6013      	str	r3, [r2, #0]




	//configure ADC prescalar
	ADC1_COMMON->CCR = 0; //reset
 8000284:	4b1a      	ldr	r3, [pc, #104]	; (80002f0 <pc0_adc_init+0xd0>)
 8000286:	2200      	movs	r2, #0
 8000288:	609a      	str	r2, [r3, #8]

	ADC1_COMMON->CCR |= (ADC_CCR_PRESC_3 | ADC_CCR_PRESC_1);
 800028a:	4b19      	ldr	r3, [pc, #100]	; (80002f0 <pc0_adc_init+0xd0>)
 800028c:	689b      	ldr	r3, [r3, #8]
 800028e:	4a18      	ldr	r2, [pc, #96]	; (80002f0 <pc0_adc_init+0xd0>)
 8000290:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
 8000294:	6093      	str	r3, [r2, #8]
	//ADC_CCR |= CKMODE;
	ADC1_COMMON->CCR |= ~(ADC_CCR_CKMODE_0); //this should be zero???
 8000296:	4b16      	ldr	r3, [pc, #88]	; (80002f0 <pc0_adc_init+0xd0>)
 8000298:	689b      	ldr	r3, [r3, #8]
 800029a:	4a15      	ldr	r2, [pc, #84]	; (80002f0 <pc0_adc_init+0xd0>)
 800029c:	f463 3380 	orn	r3, r3, #65536	; 0x10000
 80002a0:	6093      	str	r3, [r2, #8]

	//sequence and length parameters
	ADC1->SQR1 = ADC_CH1;
 80002a2:	4b11      	ldr	r3, [pc, #68]	; (80002e8 <pc0_adc_init+0xc8>)
 80002a4:	2240      	movs	r2, #64	; 0x40
 80002a6:	631a      	str	r2, [r3, #48]	; 0x30
	//length = zero to bit 0-3 sqr1
	ADC1->SQR1 &= ~(1U<<0);
 80002a8:	4b0f      	ldr	r3, [pc, #60]	; (80002e8 <pc0_adc_init+0xc8>)
 80002aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ac:	4a0e      	ldr	r2, [pc, #56]	; (80002e8 <pc0_adc_init+0xc8>)
 80002ae:	f023 0301 	bic.w	r3, r3, #1
 80002b2:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1->SQR1 &= ~(1U<<1);
 80002b4:	4b0c      	ldr	r3, [pc, #48]	; (80002e8 <pc0_adc_init+0xc8>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b8:	4a0b      	ldr	r2, [pc, #44]	; (80002e8 <pc0_adc_init+0xc8>)
 80002ba:	f023 0302 	bic.w	r3, r3, #2
 80002be:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1->SQR1 &= ~(1U<<2);
 80002c0:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <pc0_adc_init+0xc8>)
 80002c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c4:	4a08      	ldr	r2, [pc, #32]	; (80002e8 <pc0_adc_init+0xc8>)
 80002c6:	f023 0304 	bic.w	r3, r3, #4
 80002ca:	6313      	str	r3, [r2, #48]	; 0x30
	ADC1->SQR1 &= ~(1U<<3);
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <pc0_adc_init+0xc8>)
 80002ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002d0:	4a05      	ldr	r2, [pc, #20]	; (80002e8 <pc0_adc_init+0xc8>)
 80002d2:	f023 0308 	bic.w	r3, r3, #8
 80002d6:	6313      	str	r3, [r2, #48]	; 0x30
	//scan and resolution
	//ADC1->CFGR


	//enable ADC
	ADC1->CR = ADC_EN;
 80002d8:	4b03      	ldr	r3, [pc, #12]	; (80002e8 <pc0_adc_init+0xc8>)
 80002da:	2201      	movs	r2, #1
 80002dc:	609a      	str	r2, [r3, #8]
}
 80002de:	bf00      	nop
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr
 80002e8:	50040000 	.word	0x50040000
 80002ec:	48000800 	.word	0x48000800
 80002f0:	50040300 	.word	0x50040300

080002f4 <startConversion>:

void startConversion(void){
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0
		ADC1->CR |= ADC_CR_START;
 80002f8:	4b05      	ldr	r3, [pc, #20]	; (8000310 <startConversion+0x1c>)
 80002fa:	689b      	ldr	r3, [r3, #8]
 80002fc:	4a04      	ldr	r2, [pc, #16]	; (8000310 <startConversion+0x1c>)
 80002fe:	f043 0304 	orr.w	r3, r3, #4
 8000302:	6093      	str	r3, [r2, #8]
}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	50040000 	.word	0x50040000

08000314 <readAdc>:
uint32_t readAdc(void){
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
	while(!(ADC1->ISR & ADC_EOC)){}
 8000318:	bf00      	nop
 800031a:	4b06      	ldr	r3, [pc, #24]	; (8000334 <readAdc+0x20>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	f003 0304 	and.w	r3, r3, #4
 8000322:	2b00      	cmp	r3, #0
 8000324:	d0f9      	beq.n	800031a <readAdc+0x6>
		return (ADC1->DR);
 8000326:	4b03      	ldr	r3, [pc, #12]	; (8000334 <readAdc+0x20>)
 8000328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800032a:	4618      	mov	r0, r3
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr
 8000334:	50040000 	.word	0x50040000

08000338 <main>:
//israel gbati bare metal stm32

uint32_t adcVal;


int main(void){
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
	rcc_init();
 800033c:	f000 f816 	bl	800036c <rcc_init>

	usart1_tx_en();
 8000340:	f000 f95a 	bl	80005f8 <usart1_tx_en>

	pc0_adc_init();
 8000344:	f7ff ff6c 	bl	8000220 <pc0_adc_init>

	while(1){
		startConversion();
 8000348:	f7ff ffd4 	bl	80002f4 <startConversion>
		adcVal = (uint32_t)readAdc();
 800034c:	f7ff ffe2 	bl	8000314 <readAdc>
 8000350:	4603      	mov	r3, r0
 8000352:	4a04      	ldr	r2, [pc, #16]	; (8000364 <main+0x2c>)
 8000354:	6013      	str	r3, [r2, #0]
		printf ("sensor value = %d \n\r", (int) adcVal);
 8000356:	4b03      	ldr	r3, [pc, #12]	; (8000364 <main+0x2c>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4619      	mov	r1, r3
 800035c:	4802      	ldr	r0, [pc, #8]	; (8000368 <main+0x30>)
 800035e:	f000 fa33 	bl	80007c8 <iprintf>
		startConversion();
 8000362:	e7f1      	b.n	8000348 <main+0x10>
 8000364:	20000084 	.word	0x20000084
 8000368:	080016fc 	.word	0x080016fc

0800036c <rcc_init>:
#define PLLN	 32
#define PLLP	 2
#define PLLM	 1


void rcc_init(){
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0

	// 1. set hse/ msi/ hsi and wait til ready
	RCC->CR |= RCC_CR_MSION;	//MSI_ON
 8000370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800037a:	f043 0301 	orr.w	r3, r3, #1
 800037e:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & RCC_CR_MSIRDY)); // wait til msi ready
 8000380:	bf00      	nop
 8000382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000386:	681b      	ldr	r3, [r3, #0]
 8000388:	f003 0302 	and.w	r3, r3, #2
 800038c:	2b00      	cmp	r3, #0
 800038e:	d0f8      	beq.n	8000382 <rcc_init+0x16>

	//2. power enable clock and voltage regulator
	RCC->AHB2ENR |= RCC_AHB2ENR_ADCEN; //try commenting/uncommenting this
 8000390:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000396:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800039a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800039e:	64d3      	str	r3, [r2, #76]	; 0x4c
	//2.5 adc deeppwr enable is in adc.c
	// but lets enable it here in case we need to...
	ADC1->CR &= ~(ADC_CR_DEEPPWD); //this belongs in adc.c
 80003a0:	4b3b      	ldr	r3, [pc, #236]	; (8000490 <rcc_init+0x124>)
 80003a2:	689b      	ldr	r3, [r3, #8]
 80003a4:	4a3a      	ldr	r2, [pc, #232]	; (8000490 <rcc_init+0x124>)
 80003a6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80003aa:	6093      	str	r3, [r2, #8]
			// vr enable
	ADC1->CR |= ADC_CR_ADVREGEN; //this belongs in adc.c
 80003ac:	4b38      	ldr	r3, [pc, #224]	; (8000490 <rcc_init+0x124>)
 80003ae:	689b      	ldr	r3, [r3, #8]
 80003b0:	4a37      	ldr	r2, [pc, #220]	; (8000490 <rcc_init+0x124>)
 80003b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003b6:	6093      	str	r3, [r2, #8]
	//3.configure flash prefetch and latency settings.

	// see rm p77 for flash latency info
	// see rm p109 flash_acr registers
	FLASH->ACR = (1<<8) | (1<<9)| (1<<10)| (FLASH_ACR_LATENCY_0WS);
 80003b8:	4b36      	ldr	r3, [pc, #216]	; (8000494 <rcc_init+0x128>)
 80003ba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80003be:	601a      	str	r2, [r3, #0]

	//4 .configure prescalars hclk pclk pclk2.
	RCC->CFGR &= ~(1<<7) | ~(1<<6) | ~(1<<5) | ~(1<<4); // HPRE zero to 4th bit up to 7th bit
 80003c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80003c8:	689b      	ldr	r3, [r3, #8]
 80003ca:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~(1<<13) | ~(1<<12) | ~(1<<11);
 80003cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80003d4:	689b      	ldr	r3, [r3, #8]
 80003d6:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~(1<<10) | ~(1<<9) | ~(1<<8);
 80003d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80003e0:	689b      	ldr	r3, [r3, #8]
 80003e2:	6093      	str	r3, [r2, #8]


	//5. configure main pll.
	RCC->PLLCFGR |= (1<<0); // MSI AS CLOCK
 80003e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003e8:	68db      	ldr	r3, [r3, #12]
 80003ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80003ee:	f043 0301 	orr.w	r3, r3, #1
 80003f2:	60d3      	str	r3, [r2, #12]
	// ALSO PLLP, N, M
	RCC->PLLCFGR |= (1<<17); // PLLP
 80003f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80003f8:	68db      	ldr	r3, [r3, #12]
 80003fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80003fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000402:	60d3      	str	r3, [r2, #12]
	RCC->PLLCFGR |= (PLLN<<8);
 8000404:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000408:	68db      	ldr	r3, [r3, #12]
 800040a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800040e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000412:	60d3      	str	r3, [r2, #12]

	RCC->CR |= (RCC_CR_PLLSAI1ON); // pll sai on/ready.
 8000414:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800041e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000422:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR % (RCC_CR_PLLSAI1RDY)));
 8000424:	bf00      	nop
 8000426:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800042a:	681b      	ldr	r3, [r3, #0]
 800042c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8000430:	2b00      	cmp	r3, #0
 8000432:	d0f8      	beq.n	8000426 <rcc_init+0xba>
	RCC->CR |= (RCC_CR_MSIPLLEN); //this wont happen unless lseon is enabled rm p223
 8000434:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800043e:	f043 0304 	orr.w	r3, r3, #4
 8000442:	6013      	str	r3, [r2, #0]

	//6. enable pll, wait for ready.
	RCC->CR |= (1U<<24); //PLL_ON
 8000444:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800044e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000452:	6013      	str	r3, [r2, #0]
	while (!(RCC->CR & (1<<25)));
 8000454:	bf00      	nop
 8000456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000460:	2b00      	cmp	r3, #0
 8000462:	d0f8      	beq.n	8000456 <rcc_init+0xea>
	//7. select clock source, wait for ready.
		//system clock source???
		//select MSI as sysclk source?? <q> this pg 225 ref manual. not sure!!!!
		//RCC->CFGR MCOSEL (27:24) TO 0010
	RCC->CFGR &= ~(1U<<0); // 00 TO SW (MSI = SYSTEM CLOCK)
 8000464:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000468:	689b      	ldr	r3, [r3, #8]
 800046a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800046e:	f023 0301 	bic.w	r3, r3, #1
 8000472:	6093      	str	r3, [r2, #8]
	RCC->CFGR &= ~(1U<<1);
 8000474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000478:	689b      	ldr	r3, [r3, #8]
 800047a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800047e:	f023 0302 	bic.w	r3, r3, #2
 8000482:	6093      	str	r3, [r2, #8]
	//while(!(RCC->CFGR & ((0<<2) & (0<<3)))); // read 00 from SWstatus bits 3:2




}
 8000484:	bf00      	nop
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	50040000 	.word	0x50040000
 8000494:	58004000 	.word	0x58004000

08000498 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b086      	sub	sp, #24
 800049c:	af00      	add	r7, sp, #0
 800049e:	60f8      	str	r0, [r7, #12]
 80004a0:	60b9      	str	r1, [r7, #8]
 80004a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004a4:	2300      	movs	r3, #0
 80004a6:	617b      	str	r3, [r7, #20]
 80004a8:	e00a      	b.n	80004c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80004aa:	f3af 8000 	nop.w
 80004ae:	4601      	mov	r1, r0
 80004b0:	68bb      	ldr	r3, [r7, #8]
 80004b2:	1c5a      	adds	r2, r3, #1
 80004b4:	60ba      	str	r2, [r7, #8]
 80004b6:	b2ca      	uxtb	r2, r1
 80004b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ba:	697b      	ldr	r3, [r7, #20]
 80004bc:	3301      	adds	r3, #1
 80004be:	617b      	str	r3, [r7, #20]
 80004c0:	697a      	ldr	r2, [r7, #20]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	429a      	cmp	r2, r3
 80004c6:	dbf0      	blt.n	80004aa <_read+0x12>
	}

return len;
 80004c8:	687b      	ldr	r3, [r7, #4]
}
 80004ca:	4618      	mov	r0, r3
 80004cc:	3718      	adds	r7, #24
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}

080004d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004d2:	b580      	push	{r7, lr}
 80004d4:	b086      	sub	sp, #24
 80004d6:	af00      	add	r7, sp, #0
 80004d8:	60f8      	str	r0, [r7, #12]
 80004da:	60b9      	str	r1, [r7, #8]
 80004dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004de:	2300      	movs	r3, #0
 80004e0:	617b      	str	r3, [r7, #20]
 80004e2:	e009      	b.n	80004f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80004e4:	68bb      	ldr	r3, [r7, #8]
 80004e6:	1c5a      	adds	r2, r3, #1
 80004e8:	60ba      	str	r2, [r7, #8]
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 f877 	bl	80005e0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	3301      	adds	r3, #1
 80004f6:	617b      	str	r3, [r7, #20]
 80004f8:	697a      	ldr	r2, [r7, #20]
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	dbf1      	blt.n	80004e4 <_write+0x12>
	}
	return len;
 8000500:	687b      	ldr	r3, [r7, #4]
}
 8000502:	4618      	mov	r0, r3
 8000504:	3718      	adds	r7, #24
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}

0800050a <_close>:

int _close(int file)
{
 800050a:	b480      	push	{r7}
 800050c:	b083      	sub	sp, #12
 800050e:	af00      	add	r7, sp, #0
 8000510:	6078      	str	r0, [r7, #4]
	return -1;
 8000512:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000516:	4618      	mov	r0, r3
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000522:	b480      	push	{r7}
 8000524:	b083      	sub	sp, #12
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
 800052a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000532:	605a      	str	r2, [r3, #4]
	return 0;
 8000534:	2300      	movs	r3, #0
}
 8000536:	4618      	mov	r0, r3
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr

08000542 <_isatty>:

int _isatty(int file)
{
 8000542:	b480      	push	{r7}
 8000544:	b083      	sub	sp, #12
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
	return 1;
 800054a:	2301      	movs	r3, #1
}
 800054c:	4618      	mov	r0, r3
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000558:	b480      	push	{r7}
 800055a:	b085      	sub	sp, #20
 800055c:	af00      	add	r7, sp, #0
 800055e:	60f8      	str	r0, [r7, #12]
 8000560:	60b9      	str	r1, [r7, #8]
 8000562:	607a      	str	r2, [r7, #4]
	return 0;
 8000564:	2300      	movs	r3, #0
}
 8000566:	4618      	mov	r0, r3
 8000568:	3714      	adds	r7, #20
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
	...

08000574 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b086      	sub	sp, #24
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800057c:	4a14      	ldr	r2, [pc, #80]	; (80005d0 <_sbrk+0x5c>)
 800057e:	4b15      	ldr	r3, [pc, #84]	; (80005d4 <_sbrk+0x60>)
 8000580:	1ad3      	subs	r3, r2, r3
 8000582:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000588:	4b13      	ldr	r3, [pc, #76]	; (80005d8 <_sbrk+0x64>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d102      	bne.n	8000596 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000590:	4b11      	ldr	r3, [pc, #68]	; (80005d8 <_sbrk+0x64>)
 8000592:	4a12      	ldr	r2, [pc, #72]	; (80005dc <_sbrk+0x68>)
 8000594:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000596:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <_sbrk+0x64>)
 8000598:	681a      	ldr	r2, [r3, #0]
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	4413      	add	r3, r2
 800059e:	693a      	ldr	r2, [r7, #16]
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d207      	bcs.n	80005b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005a4:	f000 f8de 	bl	8000764 <__errno>
 80005a8:	4603      	mov	r3, r0
 80005aa:	220c      	movs	r2, #12
 80005ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005b2:	e009      	b.n	80005c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005b4:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <_sbrk+0x64>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005ba:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <_sbrk+0x64>)
 80005bc:	681a      	ldr	r2, [r3, #0]
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4413      	add	r3, r2
 80005c2:	4a05      	ldr	r2, [pc, #20]	; (80005d8 <_sbrk+0x64>)
 80005c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005c6:	68fb      	ldr	r3, [r7, #12]
}
 80005c8:	4618      	mov	r0, r3
 80005ca:	3718      	adds	r7, #24
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20030000 	.word	0x20030000
 80005d4:	00000400 	.word	0x00000400
 80005d8:	20000088 	.word	0x20000088
 80005dc:	200000a0 	.word	0x200000a0

080005e0 <__io_putchar>:
char uart1_read(void);
void uart1_print(int ch);


//re-implement putchar
int __io_putchar( int ch){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	uart1_write(ch);
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f000 f853 	bl	8000694 <uart1_write>
		return ch;
 80005ee:	687b      	ldr	r3, [r7, #4]
}
 80005f0:	4618      	mov	r0, r3
 80005f2:	3708      	adds	r7, #8
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}

080005f8 <usart1_tx_en>:


}


void usart1_tx_en (void){
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	 * configure uart module:
	 * enable uart clk access
	 * configure baud/transfer direction
	 * enable uart module
	 */
	RCC->AHB2ENR |= GPIOBEN;
 80005fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000606:	f043 0302 	orr.w	r3, r3, #2
 800060a:	64d3      	str	r3, [r2, #76]	; 0x4c

	GPIOB->MODER &= ~(1U<<12);
 800060c:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <usart1_tx_en+0x90>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a1d      	ldr	r2, [pc, #116]	; (8000688 <usart1_tx_en+0x90>)
 8000612:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000616:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=   (1U<<13);
 8000618:	4b1b      	ldr	r3, [pc, #108]	; (8000688 <usart1_tx_en+0x90>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a1a      	ldr	r2, [pc, #104]	; (8000688 <usart1_tx_en+0x90>)
 800061e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000622:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[0]  |= (1U<<24);
 8000624:	4b18      	ldr	r3, [pc, #96]	; (8000688 <usart1_tx_en+0x90>)
 8000626:	6a1b      	ldr	r3, [r3, #32]
 8000628:	4a17      	ldr	r2, [pc, #92]	; (8000688 <usart1_tx_en+0x90>)
 800062a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800062e:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0]  |= (1U<<25);
 8000630:	4b15      	ldr	r3, [pc, #84]	; (8000688 <usart1_tx_en+0x90>)
 8000632:	6a1b      	ldr	r3, [r3, #32]
 8000634:	4a14      	ldr	r2, [pc, #80]	; (8000688 <usart1_tx_en+0x90>)
 8000636:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800063a:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0]  |= (1U<<26);
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <usart1_tx_en+0x90>)
 800063e:	6a1b      	ldr	r3, [r3, #32]
 8000640:	4a11      	ldr	r2, [pc, #68]	; (8000688 <usart1_tx_en+0x90>)
 8000642:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000646:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0]  &= ~(1U<<27);
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <usart1_tx_en+0x90>)
 800064a:	6a1b      	ldr	r3, [r3, #32]
 800064c:	4a0e      	ldr	r2, [pc, #56]	; (8000688 <usart1_tx_en+0x90>)
 800064e:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000652:	6213      	str	r3, [r2, #32]

	RCC->APB2ENR |= USART1EN;
 8000654:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000658:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800065a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800065e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000662:	6613      	str	r3, [r2, #96]	; 0x60

	uart_set_baudrate(USART1, APB2_FREQ, UART_BAUDRATE);
 8000664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000668:	4908      	ldr	r1, [pc, #32]	; (800068c <usart1_tx_en+0x94>)
 800066a:	4809      	ldr	r0, [pc, #36]	; (8000690 <usart1_tx_en+0x98>)
 800066c:	f000 f82a 	bl	80006c4 <uart_set_baudrate>

	USART1->CR1 = CR1_TE ;
 8000670:	4b07      	ldr	r3, [pc, #28]	; (8000690 <usart1_tx_en+0x98>)
 8000672:	2208      	movs	r2, #8
 8000674:	601a      	str	r2, [r3, #0]
	USART1->CR1	|= CR1_UE;
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <usart1_tx_en+0x98>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	4a05      	ldr	r2, [pc, #20]	; (8000690 <usart1_tx_en+0x98>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	6013      	str	r3, [r2, #0]


}
 8000682:	bf00      	nop
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	48000400 	.word	0x48000400
 800068c:	003d0900 	.word	0x003d0900
 8000690:	40013800 	.word	0x40013800

08000694 <uart1_write>:

	return read_val;
	//return USART1->RDR;
}

void uart1_write(int ch){
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	while(!(USART1->ISR & ISR_TXE)){}
 800069c:	bf00      	nop
 800069e:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <uart1_write+0x2c>)
 80006a0:	69db      	ldr	r3, [r3, #28]
 80006a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d0f9      	beq.n	800069e <uart1_write+0xa>

	USART1->TDR = (ch & 0xFF);
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4a04      	ldr	r2, [pc, #16]	; (80006c0 <uart1_write+0x2c>)
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	6293      	str	r3, [r2, #40]	; 0x28


}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	40013800 	.word	0x40013800

080006c4 <uart_set_baudrate>:

static void 	uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b084      	sub	sp, #16
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	60f8      	str	r0, [r7, #12]
 80006cc:	60b9      	str	r1, [r7, #8]
 80006ce:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd (PeriphClk, BaudRate);
 80006d0:	6879      	ldr	r1, [r7, #4]
 80006d2:	68b8      	ldr	r0, [r7, #8]
 80006d4:	f000 f808 	bl	80006e8 <compute_uart_bd>
 80006d8:	4603      	mov	r3, r0
 80006da:	461a      	mov	r2, r3
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	60da      	str	r2, [r3, #12]
}
 80006e0:	bf00      	nop
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}

080006e8 <compute_uart_bd>:

static uint16_t compute_uart_bd (uint32_t PeriphClk, uint32_t BaudRate){
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
 80006f0:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	085a      	lsrs	r2, r3, #1
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	441a      	add	r2, r3
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000700:	b29b      	uxth	r3, r3
}
 8000702:	4618      	mov	r0, r3
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
	...

08000710 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000710:	480d      	ldr	r0, [pc, #52]	; (8000748 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000712:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000714:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000718:	480c      	ldr	r0, [pc, #48]	; (800074c <LoopForever+0x6>)
  ldr r1, =_edata
 800071a:	490d      	ldr	r1, [pc, #52]	; (8000750 <LoopForever+0xa>)
  ldr r2, =_sidata
 800071c:	4a0d      	ldr	r2, [pc, #52]	; (8000754 <LoopForever+0xe>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000720:	e002      	b.n	8000728 <LoopCopyDataInit>

08000722 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000722:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000724:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000726:	3304      	adds	r3, #4

08000728 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000728:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800072c:	d3f9      	bcc.n	8000722 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800072e:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000730:	4c0a      	ldr	r4, [pc, #40]	; (800075c <LoopForever+0x16>)
  movs r3, #0
 8000732:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000734:	e001      	b.n	800073a <LoopFillZerobss>

08000736 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000736:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000738:	3204      	adds	r2, #4

0800073a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800073c:	d3fb      	bcc.n	8000736 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800073e:	f000 f817 	bl	8000770 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000742:	f7ff fdf9 	bl	8000338 <main>

08000746 <LoopForever>:

LoopForever:
    b LoopForever
 8000746:	e7fe      	b.n	8000746 <LoopForever>
  ldr   r0, =_estack
 8000748:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800074c:	20000004 	.word	0x20000004
  ldr r1, =_edata
 8000750:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000754:	080017b4 	.word	0x080017b4
  ldr r2, =_sbss
 8000758:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800075c:	2000009c 	.word	0x2000009c

08000760 <ADC1_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000760:	e7fe      	b.n	8000760 <ADC1_IRQHandler>
	...

08000764 <__errno>:
 8000764:	4b01      	ldr	r3, [pc, #4]	; (800076c <__errno+0x8>)
 8000766:	6818      	ldr	r0, [r3, #0]
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	20000004 	.word	0x20000004

08000770 <__libc_init_array>:
 8000770:	b570      	push	{r4, r5, r6, lr}
 8000772:	4d0d      	ldr	r5, [pc, #52]	; (80007a8 <__libc_init_array+0x38>)
 8000774:	4c0d      	ldr	r4, [pc, #52]	; (80007ac <__libc_init_array+0x3c>)
 8000776:	1b64      	subs	r4, r4, r5
 8000778:	10a4      	asrs	r4, r4, #2
 800077a:	2600      	movs	r6, #0
 800077c:	42a6      	cmp	r6, r4
 800077e:	d109      	bne.n	8000794 <__libc_init_array+0x24>
 8000780:	4d0b      	ldr	r5, [pc, #44]	; (80007b0 <__libc_init_array+0x40>)
 8000782:	4c0c      	ldr	r4, [pc, #48]	; (80007b4 <__libc_init_array+0x44>)
 8000784:	f000 ffae 	bl	80016e4 <_init>
 8000788:	1b64      	subs	r4, r4, r5
 800078a:	10a4      	asrs	r4, r4, #2
 800078c:	2600      	movs	r6, #0
 800078e:	42a6      	cmp	r6, r4
 8000790:	d105      	bne.n	800079e <__libc_init_array+0x2e>
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f855 3b04 	ldr.w	r3, [r5], #4
 8000798:	4798      	blx	r3
 800079a:	3601      	adds	r6, #1
 800079c:	e7ee      	b.n	800077c <__libc_init_array+0xc>
 800079e:	f855 3b04 	ldr.w	r3, [r5], #4
 80007a2:	4798      	blx	r3
 80007a4:	3601      	adds	r6, #1
 80007a6:	e7f2      	b.n	800078e <__libc_init_array+0x1e>
 80007a8:	080017ac 	.word	0x080017ac
 80007ac:	080017ac 	.word	0x080017ac
 80007b0:	080017ac 	.word	0x080017ac
 80007b4:	080017b0 	.word	0x080017b0

080007b8 <memset>:
 80007b8:	4402      	add	r2, r0
 80007ba:	4603      	mov	r3, r0
 80007bc:	4293      	cmp	r3, r2
 80007be:	d100      	bne.n	80007c2 <memset+0xa>
 80007c0:	4770      	bx	lr
 80007c2:	f803 1b01 	strb.w	r1, [r3], #1
 80007c6:	e7f9      	b.n	80007bc <memset+0x4>

080007c8 <iprintf>:
 80007c8:	b40f      	push	{r0, r1, r2, r3}
 80007ca:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <iprintf+0x2c>)
 80007cc:	b513      	push	{r0, r1, r4, lr}
 80007ce:	681c      	ldr	r4, [r3, #0]
 80007d0:	b124      	cbz	r4, 80007dc <iprintf+0x14>
 80007d2:	69a3      	ldr	r3, [r4, #24]
 80007d4:	b913      	cbnz	r3, 80007dc <iprintf+0x14>
 80007d6:	4620      	mov	r0, r4
 80007d8:	f000 f866 	bl	80008a8 <__sinit>
 80007dc:	ab05      	add	r3, sp, #20
 80007de:	9a04      	ldr	r2, [sp, #16]
 80007e0:	68a1      	ldr	r1, [r4, #8]
 80007e2:	9301      	str	r3, [sp, #4]
 80007e4:	4620      	mov	r0, r4
 80007e6:	f000 f9bd 	bl	8000b64 <_vfiprintf_r>
 80007ea:	b002      	add	sp, #8
 80007ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007f0:	b004      	add	sp, #16
 80007f2:	4770      	bx	lr
 80007f4:	20000004 	.word	0x20000004

080007f8 <std>:
 80007f8:	2300      	movs	r3, #0
 80007fa:	b510      	push	{r4, lr}
 80007fc:	4604      	mov	r4, r0
 80007fe:	e9c0 3300 	strd	r3, r3, [r0]
 8000802:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000806:	6083      	str	r3, [r0, #8]
 8000808:	8181      	strh	r1, [r0, #12]
 800080a:	6643      	str	r3, [r0, #100]	; 0x64
 800080c:	81c2      	strh	r2, [r0, #14]
 800080e:	6183      	str	r3, [r0, #24]
 8000810:	4619      	mov	r1, r3
 8000812:	2208      	movs	r2, #8
 8000814:	305c      	adds	r0, #92	; 0x5c
 8000816:	f7ff ffcf 	bl	80007b8 <memset>
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <std+0x38>)
 800081c:	6263      	str	r3, [r4, #36]	; 0x24
 800081e:	4b05      	ldr	r3, [pc, #20]	; (8000834 <std+0x3c>)
 8000820:	62a3      	str	r3, [r4, #40]	; 0x28
 8000822:	4b05      	ldr	r3, [pc, #20]	; (8000838 <std+0x40>)
 8000824:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000826:	4b05      	ldr	r3, [pc, #20]	; (800083c <std+0x44>)
 8000828:	6224      	str	r4, [r4, #32]
 800082a:	6323      	str	r3, [r4, #48]	; 0x30
 800082c:	bd10      	pop	{r4, pc}
 800082e:	bf00      	nop
 8000830:	0800110d 	.word	0x0800110d
 8000834:	0800112f 	.word	0x0800112f
 8000838:	08001167 	.word	0x08001167
 800083c:	0800118b 	.word	0x0800118b

08000840 <_cleanup_r>:
 8000840:	4901      	ldr	r1, [pc, #4]	; (8000848 <_cleanup_r+0x8>)
 8000842:	f000 b8af 	b.w	80009a4 <_fwalk_reent>
 8000846:	bf00      	nop
 8000848:	08001465 	.word	0x08001465

0800084c <__sfmoreglue>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	2268      	movs	r2, #104	; 0x68
 8000850:	1e4d      	subs	r5, r1, #1
 8000852:	4355      	muls	r5, r2
 8000854:	460e      	mov	r6, r1
 8000856:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800085a:	f000 f8e5 	bl	8000a28 <_malloc_r>
 800085e:	4604      	mov	r4, r0
 8000860:	b140      	cbz	r0, 8000874 <__sfmoreglue+0x28>
 8000862:	2100      	movs	r1, #0
 8000864:	e9c0 1600 	strd	r1, r6, [r0]
 8000868:	300c      	adds	r0, #12
 800086a:	60a0      	str	r0, [r4, #8]
 800086c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000870:	f7ff ffa2 	bl	80007b8 <memset>
 8000874:	4620      	mov	r0, r4
 8000876:	bd70      	pop	{r4, r5, r6, pc}

08000878 <__sfp_lock_acquire>:
 8000878:	4801      	ldr	r0, [pc, #4]	; (8000880 <__sfp_lock_acquire+0x8>)
 800087a:	f000 b8b3 	b.w	80009e4 <__retarget_lock_acquire_recursive>
 800087e:	bf00      	nop
 8000880:	2000008d 	.word	0x2000008d

08000884 <__sfp_lock_release>:
 8000884:	4801      	ldr	r0, [pc, #4]	; (800088c <__sfp_lock_release+0x8>)
 8000886:	f000 b8ae 	b.w	80009e6 <__retarget_lock_release_recursive>
 800088a:	bf00      	nop
 800088c:	2000008d 	.word	0x2000008d

08000890 <__sinit_lock_acquire>:
 8000890:	4801      	ldr	r0, [pc, #4]	; (8000898 <__sinit_lock_acquire+0x8>)
 8000892:	f000 b8a7 	b.w	80009e4 <__retarget_lock_acquire_recursive>
 8000896:	bf00      	nop
 8000898:	2000008e 	.word	0x2000008e

0800089c <__sinit_lock_release>:
 800089c:	4801      	ldr	r0, [pc, #4]	; (80008a4 <__sinit_lock_release+0x8>)
 800089e:	f000 b8a2 	b.w	80009e6 <__retarget_lock_release_recursive>
 80008a2:	bf00      	nop
 80008a4:	2000008e 	.word	0x2000008e

080008a8 <__sinit>:
 80008a8:	b510      	push	{r4, lr}
 80008aa:	4604      	mov	r4, r0
 80008ac:	f7ff fff0 	bl	8000890 <__sinit_lock_acquire>
 80008b0:	69a3      	ldr	r3, [r4, #24]
 80008b2:	b11b      	cbz	r3, 80008bc <__sinit+0x14>
 80008b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008b8:	f7ff bff0 	b.w	800089c <__sinit_lock_release>
 80008bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80008c0:	6523      	str	r3, [r4, #80]	; 0x50
 80008c2:	4b13      	ldr	r3, [pc, #76]	; (8000910 <__sinit+0x68>)
 80008c4:	4a13      	ldr	r2, [pc, #76]	; (8000914 <__sinit+0x6c>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	62a2      	str	r2, [r4, #40]	; 0x28
 80008ca:	42a3      	cmp	r3, r4
 80008cc:	bf04      	itt	eq
 80008ce:	2301      	moveq	r3, #1
 80008d0:	61a3      	streq	r3, [r4, #24]
 80008d2:	4620      	mov	r0, r4
 80008d4:	f000 f820 	bl	8000918 <__sfp>
 80008d8:	6060      	str	r0, [r4, #4]
 80008da:	4620      	mov	r0, r4
 80008dc:	f000 f81c 	bl	8000918 <__sfp>
 80008e0:	60a0      	str	r0, [r4, #8]
 80008e2:	4620      	mov	r0, r4
 80008e4:	f000 f818 	bl	8000918 <__sfp>
 80008e8:	2200      	movs	r2, #0
 80008ea:	60e0      	str	r0, [r4, #12]
 80008ec:	2104      	movs	r1, #4
 80008ee:	6860      	ldr	r0, [r4, #4]
 80008f0:	f7ff ff82 	bl	80007f8 <std>
 80008f4:	68a0      	ldr	r0, [r4, #8]
 80008f6:	2201      	movs	r2, #1
 80008f8:	2109      	movs	r1, #9
 80008fa:	f7ff ff7d 	bl	80007f8 <std>
 80008fe:	68e0      	ldr	r0, [r4, #12]
 8000900:	2202      	movs	r2, #2
 8000902:	2112      	movs	r1, #18
 8000904:	f7ff ff78 	bl	80007f8 <std>
 8000908:	2301      	movs	r3, #1
 800090a:	61a3      	str	r3, [r4, #24]
 800090c:	e7d2      	b.n	80008b4 <__sinit+0xc>
 800090e:	bf00      	nop
 8000910:	08001714 	.word	0x08001714
 8000914:	08000841 	.word	0x08000841

08000918 <__sfp>:
 8000918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800091a:	4607      	mov	r7, r0
 800091c:	f7ff ffac 	bl	8000878 <__sfp_lock_acquire>
 8000920:	4b1e      	ldr	r3, [pc, #120]	; (800099c <__sfp+0x84>)
 8000922:	681e      	ldr	r6, [r3, #0]
 8000924:	69b3      	ldr	r3, [r6, #24]
 8000926:	b913      	cbnz	r3, 800092e <__sfp+0x16>
 8000928:	4630      	mov	r0, r6
 800092a:	f7ff ffbd 	bl	80008a8 <__sinit>
 800092e:	3648      	adds	r6, #72	; 0x48
 8000930:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000934:	3b01      	subs	r3, #1
 8000936:	d503      	bpl.n	8000940 <__sfp+0x28>
 8000938:	6833      	ldr	r3, [r6, #0]
 800093a:	b30b      	cbz	r3, 8000980 <__sfp+0x68>
 800093c:	6836      	ldr	r6, [r6, #0]
 800093e:	e7f7      	b.n	8000930 <__sfp+0x18>
 8000940:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000944:	b9d5      	cbnz	r5, 800097c <__sfp+0x64>
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <__sfp+0x88>)
 8000948:	60e3      	str	r3, [r4, #12]
 800094a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800094e:	6665      	str	r5, [r4, #100]	; 0x64
 8000950:	f000 f847 	bl	80009e2 <__retarget_lock_init_recursive>
 8000954:	f7ff ff96 	bl	8000884 <__sfp_lock_release>
 8000958:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800095c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000960:	6025      	str	r5, [r4, #0]
 8000962:	61a5      	str	r5, [r4, #24]
 8000964:	2208      	movs	r2, #8
 8000966:	4629      	mov	r1, r5
 8000968:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800096c:	f7ff ff24 	bl	80007b8 <memset>
 8000970:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000974:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000978:	4620      	mov	r0, r4
 800097a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800097c:	3468      	adds	r4, #104	; 0x68
 800097e:	e7d9      	b.n	8000934 <__sfp+0x1c>
 8000980:	2104      	movs	r1, #4
 8000982:	4638      	mov	r0, r7
 8000984:	f7ff ff62 	bl	800084c <__sfmoreglue>
 8000988:	4604      	mov	r4, r0
 800098a:	6030      	str	r0, [r6, #0]
 800098c:	2800      	cmp	r0, #0
 800098e:	d1d5      	bne.n	800093c <__sfp+0x24>
 8000990:	f7ff ff78 	bl	8000884 <__sfp_lock_release>
 8000994:	230c      	movs	r3, #12
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	e7ee      	b.n	8000978 <__sfp+0x60>
 800099a:	bf00      	nop
 800099c:	08001714 	.word	0x08001714
 80009a0:	ffff0001 	.word	0xffff0001

080009a4 <_fwalk_reent>:
 80009a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009a8:	4606      	mov	r6, r0
 80009aa:	4688      	mov	r8, r1
 80009ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80009b0:	2700      	movs	r7, #0
 80009b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80009b6:	f1b9 0901 	subs.w	r9, r9, #1
 80009ba:	d505      	bpl.n	80009c8 <_fwalk_reent+0x24>
 80009bc:	6824      	ldr	r4, [r4, #0]
 80009be:	2c00      	cmp	r4, #0
 80009c0:	d1f7      	bne.n	80009b2 <_fwalk_reent+0xe>
 80009c2:	4638      	mov	r0, r7
 80009c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009c8:	89ab      	ldrh	r3, [r5, #12]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d907      	bls.n	80009de <_fwalk_reent+0x3a>
 80009ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80009d2:	3301      	adds	r3, #1
 80009d4:	d003      	beq.n	80009de <_fwalk_reent+0x3a>
 80009d6:	4629      	mov	r1, r5
 80009d8:	4630      	mov	r0, r6
 80009da:	47c0      	blx	r8
 80009dc:	4307      	orrs	r7, r0
 80009de:	3568      	adds	r5, #104	; 0x68
 80009e0:	e7e9      	b.n	80009b6 <_fwalk_reent+0x12>

080009e2 <__retarget_lock_init_recursive>:
 80009e2:	4770      	bx	lr

080009e4 <__retarget_lock_acquire_recursive>:
 80009e4:	4770      	bx	lr

080009e6 <__retarget_lock_release_recursive>:
 80009e6:	4770      	bx	lr

080009e8 <sbrk_aligned>:
 80009e8:	b570      	push	{r4, r5, r6, lr}
 80009ea:	4e0e      	ldr	r6, [pc, #56]	; (8000a24 <sbrk_aligned+0x3c>)
 80009ec:	460c      	mov	r4, r1
 80009ee:	6831      	ldr	r1, [r6, #0]
 80009f0:	4605      	mov	r5, r0
 80009f2:	b911      	cbnz	r1, 80009fa <sbrk_aligned+0x12>
 80009f4:	f000 fb7a 	bl	80010ec <_sbrk_r>
 80009f8:	6030      	str	r0, [r6, #0]
 80009fa:	4621      	mov	r1, r4
 80009fc:	4628      	mov	r0, r5
 80009fe:	f000 fb75 	bl	80010ec <_sbrk_r>
 8000a02:	1c43      	adds	r3, r0, #1
 8000a04:	d00a      	beq.n	8000a1c <sbrk_aligned+0x34>
 8000a06:	1cc4      	adds	r4, r0, #3
 8000a08:	f024 0403 	bic.w	r4, r4, #3
 8000a0c:	42a0      	cmp	r0, r4
 8000a0e:	d007      	beq.n	8000a20 <sbrk_aligned+0x38>
 8000a10:	1a21      	subs	r1, r4, r0
 8000a12:	4628      	mov	r0, r5
 8000a14:	f000 fb6a 	bl	80010ec <_sbrk_r>
 8000a18:	3001      	adds	r0, #1
 8000a1a:	d101      	bne.n	8000a20 <sbrk_aligned+0x38>
 8000a1c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8000a20:	4620      	mov	r0, r4
 8000a22:	bd70      	pop	{r4, r5, r6, pc}
 8000a24:	20000094 	.word	0x20000094

08000a28 <_malloc_r>:
 8000a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a2c:	1ccd      	adds	r5, r1, #3
 8000a2e:	f025 0503 	bic.w	r5, r5, #3
 8000a32:	3508      	adds	r5, #8
 8000a34:	2d0c      	cmp	r5, #12
 8000a36:	bf38      	it	cc
 8000a38:	250c      	movcc	r5, #12
 8000a3a:	2d00      	cmp	r5, #0
 8000a3c:	4607      	mov	r7, r0
 8000a3e:	db01      	blt.n	8000a44 <_malloc_r+0x1c>
 8000a40:	42a9      	cmp	r1, r5
 8000a42:	d905      	bls.n	8000a50 <_malloc_r+0x28>
 8000a44:	230c      	movs	r3, #12
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	2600      	movs	r6, #0
 8000a4a:	4630      	mov	r0, r6
 8000a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a50:	4e2e      	ldr	r6, [pc, #184]	; (8000b0c <_malloc_r+0xe4>)
 8000a52:	f000 fdbb 	bl	80015cc <__malloc_lock>
 8000a56:	6833      	ldr	r3, [r6, #0]
 8000a58:	461c      	mov	r4, r3
 8000a5a:	bb34      	cbnz	r4, 8000aaa <_malloc_r+0x82>
 8000a5c:	4629      	mov	r1, r5
 8000a5e:	4638      	mov	r0, r7
 8000a60:	f7ff ffc2 	bl	80009e8 <sbrk_aligned>
 8000a64:	1c43      	adds	r3, r0, #1
 8000a66:	4604      	mov	r4, r0
 8000a68:	d14d      	bne.n	8000b06 <_malloc_r+0xde>
 8000a6a:	6834      	ldr	r4, [r6, #0]
 8000a6c:	4626      	mov	r6, r4
 8000a6e:	2e00      	cmp	r6, #0
 8000a70:	d140      	bne.n	8000af4 <_malloc_r+0xcc>
 8000a72:	6823      	ldr	r3, [r4, #0]
 8000a74:	4631      	mov	r1, r6
 8000a76:	4638      	mov	r0, r7
 8000a78:	eb04 0803 	add.w	r8, r4, r3
 8000a7c:	f000 fb36 	bl	80010ec <_sbrk_r>
 8000a80:	4580      	cmp	r8, r0
 8000a82:	d13a      	bne.n	8000afa <_malloc_r+0xd2>
 8000a84:	6821      	ldr	r1, [r4, #0]
 8000a86:	3503      	adds	r5, #3
 8000a88:	1a6d      	subs	r5, r5, r1
 8000a8a:	f025 0503 	bic.w	r5, r5, #3
 8000a8e:	3508      	adds	r5, #8
 8000a90:	2d0c      	cmp	r5, #12
 8000a92:	bf38      	it	cc
 8000a94:	250c      	movcc	r5, #12
 8000a96:	4629      	mov	r1, r5
 8000a98:	4638      	mov	r0, r7
 8000a9a:	f7ff ffa5 	bl	80009e8 <sbrk_aligned>
 8000a9e:	3001      	adds	r0, #1
 8000aa0:	d02b      	beq.n	8000afa <_malloc_r+0xd2>
 8000aa2:	6823      	ldr	r3, [r4, #0]
 8000aa4:	442b      	add	r3, r5
 8000aa6:	6023      	str	r3, [r4, #0]
 8000aa8:	e00e      	b.n	8000ac8 <_malloc_r+0xa0>
 8000aaa:	6822      	ldr	r2, [r4, #0]
 8000aac:	1b52      	subs	r2, r2, r5
 8000aae:	d41e      	bmi.n	8000aee <_malloc_r+0xc6>
 8000ab0:	2a0b      	cmp	r2, #11
 8000ab2:	d916      	bls.n	8000ae2 <_malloc_r+0xba>
 8000ab4:	1961      	adds	r1, r4, r5
 8000ab6:	42a3      	cmp	r3, r4
 8000ab8:	6025      	str	r5, [r4, #0]
 8000aba:	bf18      	it	ne
 8000abc:	6059      	strne	r1, [r3, #4]
 8000abe:	6863      	ldr	r3, [r4, #4]
 8000ac0:	bf08      	it	eq
 8000ac2:	6031      	streq	r1, [r6, #0]
 8000ac4:	5162      	str	r2, [r4, r5]
 8000ac6:	604b      	str	r3, [r1, #4]
 8000ac8:	4638      	mov	r0, r7
 8000aca:	f104 060b 	add.w	r6, r4, #11
 8000ace:	f000 fd83 	bl	80015d8 <__malloc_unlock>
 8000ad2:	f026 0607 	bic.w	r6, r6, #7
 8000ad6:	1d23      	adds	r3, r4, #4
 8000ad8:	1af2      	subs	r2, r6, r3
 8000ada:	d0b6      	beq.n	8000a4a <_malloc_r+0x22>
 8000adc:	1b9b      	subs	r3, r3, r6
 8000ade:	50a3      	str	r3, [r4, r2]
 8000ae0:	e7b3      	b.n	8000a4a <_malloc_r+0x22>
 8000ae2:	6862      	ldr	r2, [r4, #4]
 8000ae4:	42a3      	cmp	r3, r4
 8000ae6:	bf0c      	ite	eq
 8000ae8:	6032      	streq	r2, [r6, #0]
 8000aea:	605a      	strne	r2, [r3, #4]
 8000aec:	e7ec      	b.n	8000ac8 <_malloc_r+0xa0>
 8000aee:	4623      	mov	r3, r4
 8000af0:	6864      	ldr	r4, [r4, #4]
 8000af2:	e7b2      	b.n	8000a5a <_malloc_r+0x32>
 8000af4:	4634      	mov	r4, r6
 8000af6:	6876      	ldr	r6, [r6, #4]
 8000af8:	e7b9      	b.n	8000a6e <_malloc_r+0x46>
 8000afa:	230c      	movs	r3, #12
 8000afc:	603b      	str	r3, [r7, #0]
 8000afe:	4638      	mov	r0, r7
 8000b00:	f000 fd6a 	bl	80015d8 <__malloc_unlock>
 8000b04:	e7a1      	b.n	8000a4a <_malloc_r+0x22>
 8000b06:	6025      	str	r5, [r4, #0]
 8000b08:	e7de      	b.n	8000ac8 <_malloc_r+0xa0>
 8000b0a:	bf00      	nop
 8000b0c:	20000090 	.word	0x20000090

08000b10 <__sfputc_r>:
 8000b10:	6893      	ldr	r3, [r2, #8]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	b410      	push	{r4}
 8000b18:	6093      	str	r3, [r2, #8]
 8000b1a:	da08      	bge.n	8000b2e <__sfputc_r+0x1e>
 8000b1c:	6994      	ldr	r4, [r2, #24]
 8000b1e:	42a3      	cmp	r3, r4
 8000b20:	db01      	blt.n	8000b26 <__sfputc_r+0x16>
 8000b22:	290a      	cmp	r1, #10
 8000b24:	d103      	bne.n	8000b2e <__sfputc_r+0x1e>
 8000b26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b2a:	f000 bb33 	b.w	8001194 <__swbuf_r>
 8000b2e:	6813      	ldr	r3, [r2, #0]
 8000b30:	1c58      	adds	r0, r3, #1
 8000b32:	6010      	str	r0, [r2, #0]
 8000b34:	7019      	strb	r1, [r3, #0]
 8000b36:	4608      	mov	r0, r1
 8000b38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <__sfputs_r>:
 8000b3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b40:	4606      	mov	r6, r0
 8000b42:	460f      	mov	r7, r1
 8000b44:	4614      	mov	r4, r2
 8000b46:	18d5      	adds	r5, r2, r3
 8000b48:	42ac      	cmp	r4, r5
 8000b4a:	d101      	bne.n	8000b50 <__sfputs_r+0x12>
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	e007      	b.n	8000b60 <__sfputs_r+0x22>
 8000b50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b54:	463a      	mov	r2, r7
 8000b56:	4630      	mov	r0, r6
 8000b58:	f7ff ffda 	bl	8000b10 <__sfputc_r>
 8000b5c:	1c43      	adds	r3, r0, #1
 8000b5e:	d1f3      	bne.n	8000b48 <__sfputs_r+0xa>
 8000b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000b64 <_vfiprintf_r>:
 8000b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b68:	460d      	mov	r5, r1
 8000b6a:	b09d      	sub	sp, #116	; 0x74
 8000b6c:	4614      	mov	r4, r2
 8000b6e:	4698      	mov	r8, r3
 8000b70:	4606      	mov	r6, r0
 8000b72:	b118      	cbz	r0, 8000b7c <_vfiprintf_r+0x18>
 8000b74:	6983      	ldr	r3, [r0, #24]
 8000b76:	b90b      	cbnz	r3, 8000b7c <_vfiprintf_r+0x18>
 8000b78:	f7ff fe96 	bl	80008a8 <__sinit>
 8000b7c:	4b89      	ldr	r3, [pc, #548]	; (8000da4 <_vfiprintf_r+0x240>)
 8000b7e:	429d      	cmp	r5, r3
 8000b80:	d11b      	bne.n	8000bba <_vfiprintf_r+0x56>
 8000b82:	6875      	ldr	r5, [r6, #4]
 8000b84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000b86:	07d9      	lsls	r1, r3, #31
 8000b88:	d405      	bmi.n	8000b96 <_vfiprintf_r+0x32>
 8000b8a:	89ab      	ldrh	r3, [r5, #12]
 8000b8c:	059a      	lsls	r2, r3, #22
 8000b8e:	d402      	bmi.n	8000b96 <_vfiprintf_r+0x32>
 8000b90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b92:	f7ff ff27 	bl	80009e4 <__retarget_lock_acquire_recursive>
 8000b96:	89ab      	ldrh	r3, [r5, #12]
 8000b98:	071b      	lsls	r3, r3, #28
 8000b9a:	d501      	bpl.n	8000ba0 <_vfiprintf_r+0x3c>
 8000b9c:	692b      	ldr	r3, [r5, #16]
 8000b9e:	b9eb      	cbnz	r3, 8000bdc <_vfiprintf_r+0x78>
 8000ba0:	4629      	mov	r1, r5
 8000ba2:	4630      	mov	r0, r6
 8000ba4:	f000 fb5a 	bl	800125c <__swsetup_r>
 8000ba8:	b1c0      	cbz	r0, 8000bdc <_vfiprintf_r+0x78>
 8000baa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000bac:	07dc      	lsls	r4, r3, #31
 8000bae:	d50e      	bpl.n	8000bce <_vfiprintf_r+0x6a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bb4:	b01d      	add	sp, #116	; 0x74
 8000bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000bba:	4b7b      	ldr	r3, [pc, #492]	; (8000da8 <_vfiprintf_r+0x244>)
 8000bbc:	429d      	cmp	r5, r3
 8000bbe:	d101      	bne.n	8000bc4 <_vfiprintf_r+0x60>
 8000bc0:	68b5      	ldr	r5, [r6, #8]
 8000bc2:	e7df      	b.n	8000b84 <_vfiprintf_r+0x20>
 8000bc4:	4b79      	ldr	r3, [pc, #484]	; (8000dac <_vfiprintf_r+0x248>)
 8000bc6:	429d      	cmp	r5, r3
 8000bc8:	bf08      	it	eq
 8000bca:	68f5      	ldreq	r5, [r6, #12]
 8000bcc:	e7da      	b.n	8000b84 <_vfiprintf_r+0x20>
 8000bce:	89ab      	ldrh	r3, [r5, #12]
 8000bd0:	0598      	lsls	r0, r3, #22
 8000bd2:	d4ed      	bmi.n	8000bb0 <_vfiprintf_r+0x4c>
 8000bd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000bd6:	f7ff ff06 	bl	80009e6 <__retarget_lock_release_recursive>
 8000bda:	e7e9      	b.n	8000bb0 <_vfiprintf_r+0x4c>
 8000bdc:	2300      	movs	r3, #0
 8000bde:	9309      	str	r3, [sp, #36]	; 0x24
 8000be0:	2320      	movs	r3, #32
 8000be2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000be6:	f8cd 800c 	str.w	r8, [sp, #12]
 8000bea:	2330      	movs	r3, #48	; 0x30
 8000bec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000db0 <_vfiprintf_r+0x24c>
 8000bf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000bf4:	f04f 0901 	mov.w	r9, #1
 8000bf8:	4623      	mov	r3, r4
 8000bfa:	469a      	mov	sl, r3
 8000bfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c00:	b10a      	cbz	r2, 8000c06 <_vfiprintf_r+0xa2>
 8000c02:	2a25      	cmp	r2, #37	; 0x25
 8000c04:	d1f9      	bne.n	8000bfa <_vfiprintf_r+0x96>
 8000c06:	ebba 0b04 	subs.w	fp, sl, r4
 8000c0a:	d00b      	beq.n	8000c24 <_vfiprintf_r+0xc0>
 8000c0c:	465b      	mov	r3, fp
 8000c0e:	4622      	mov	r2, r4
 8000c10:	4629      	mov	r1, r5
 8000c12:	4630      	mov	r0, r6
 8000c14:	f7ff ff93 	bl	8000b3e <__sfputs_r>
 8000c18:	3001      	adds	r0, #1
 8000c1a:	f000 80aa 	beq.w	8000d72 <_vfiprintf_r+0x20e>
 8000c1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000c20:	445a      	add	r2, fp
 8000c22:	9209      	str	r2, [sp, #36]	; 0x24
 8000c24:	f89a 3000 	ldrb.w	r3, [sl]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f000 80a2 	beq.w	8000d72 <_vfiprintf_r+0x20e>
 8000c2e:	2300      	movs	r3, #0
 8000c30:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c38:	f10a 0a01 	add.w	sl, sl, #1
 8000c3c:	9304      	str	r3, [sp, #16]
 8000c3e:	9307      	str	r3, [sp, #28]
 8000c40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000c44:	931a      	str	r3, [sp, #104]	; 0x68
 8000c46:	4654      	mov	r4, sl
 8000c48:	2205      	movs	r2, #5
 8000c4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c4e:	4858      	ldr	r0, [pc, #352]	; (8000db0 <_vfiprintf_r+0x24c>)
 8000c50:	f7ff fa96 	bl	8000180 <memchr>
 8000c54:	9a04      	ldr	r2, [sp, #16]
 8000c56:	b9d8      	cbnz	r0, 8000c90 <_vfiprintf_r+0x12c>
 8000c58:	06d1      	lsls	r1, r2, #27
 8000c5a:	bf44      	itt	mi
 8000c5c:	2320      	movmi	r3, #32
 8000c5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c62:	0713      	lsls	r3, r2, #28
 8000c64:	bf44      	itt	mi
 8000c66:	232b      	movmi	r3, #43	; 0x2b
 8000c68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c6c:	f89a 3000 	ldrb.w	r3, [sl]
 8000c70:	2b2a      	cmp	r3, #42	; 0x2a
 8000c72:	d015      	beq.n	8000ca0 <_vfiprintf_r+0x13c>
 8000c74:	9a07      	ldr	r2, [sp, #28]
 8000c76:	4654      	mov	r4, sl
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f04f 0c0a 	mov.w	ip, #10
 8000c7e:	4621      	mov	r1, r4
 8000c80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c84:	3b30      	subs	r3, #48	; 0x30
 8000c86:	2b09      	cmp	r3, #9
 8000c88:	d94e      	bls.n	8000d28 <_vfiprintf_r+0x1c4>
 8000c8a:	b1b0      	cbz	r0, 8000cba <_vfiprintf_r+0x156>
 8000c8c:	9207      	str	r2, [sp, #28]
 8000c8e:	e014      	b.n	8000cba <_vfiprintf_r+0x156>
 8000c90:	eba0 0308 	sub.w	r3, r0, r8
 8000c94:	fa09 f303 	lsl.w	r3, r9, r3
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	9304      	str	r3, [sp, #16]
 8000c9c:	46a2      	mov	sl, r4
 8000c9e:	e7d2      	b.n	8000c46 <_vfiprintf_r+0xe2>
 8000ca0:	9b03      	ldr	r3, [sp, #12]
 8000ca2:	1d19      	adds	r1, r3, #4
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	9103      	str	r1, [sp, #12]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	bfbb      	ittet	lt
 8000cac:	425b      	neglt	r3, r3
 8000cae:	f042 0202 	orrlt.w	r2, r2, #2
 8000cb2:	9307      	strge	r3, [sp, #28]
 8000cb4:	9307      	strlt	r3, [sp, #28]
 8000cb6:	bfb8      	it	lt
 8000cb8:	9204      	strlt	r2, [sp, #16]
 8000cba:	7823      	ldrb	r3, [r4, #0]
 8000cbc:	2b2e      	cmp	r3, #46	; 0x2e
 8000cbe:	d10c      	bne.n	8000cda <_vfiprintf_r+0x176>
 8000cc0:	7863      	ldrb	r3, [r4, #1]
 8000cc2:	2b2a      	cmp	r3, #42	; 0x2a
 8000cc4:	d135      	bne.n	8000d32 <_vfiprintf_r+0x1ce>
 8000cc6:	9b03      	ldr	r3, [sp, #12]
 8000cc8:	1d1a      	adds	r2, r3, #4
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	9203      	str	r2, [sp, #12]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	bfb8      	it	lt
 8000cd2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000cd6:	3402      	adds	r4, #2
 8000cd8:	9305      	str	r3, [sp, #20]
 8000cda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000dc0 <_vfiprintf_r+0x25c>
 8000cde:	7821      	ldrb	r1, [r4, #0]
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	4650      	mov	r0, sl
 8000ce4:	f7ff fa4c 	bl	8000180 <memchr>
 8000ce8:	b140      	cbz	r0, 8000cfc <_vfiprintf_r+0x198>
 8000cea:	2340      	movs	r3, #64	; 0x40
 8000cec:	eba0 000a 	sub.w	r0, r0, sl
 8000cf0:	fa03 f000 	lsl.w	r0, r3, r0
 8000cf4:	9b04      	ldr	r3, [sp, #16]
 8000cf6:	4303      	orrs	r3, r0
 8000cf8:	3401      	adds	r4, #1
 8000cfa:	9304      	str	r3, [sp, #16]
 8000cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d00:	482c      	ldr	r0, [pc, #176]	; (8000db4 <_vfiprintf_r+0x250>)
 8000d02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000d06:	2206      	movs	r2, #6
 8000d08:	f7ff fa3a 	bl	8000180 <memchr>
 8000d0c:	2800      	cmp	r0, #0
 8000d0e:	d03f      	beq.n	8000d90 <_vfiprintf_r+0x22c>
 8000d10:	4b29      	ldr	r3, [pc, #164]	; (8000db8 <_vfiprintf_r+0x254>)
 8000d12:	bb1b      	cbnz	r3, 8000d5c <_vfiprintf_r+0x1f8>
 8000d14:	9b03      	ldr	r3, [sp, #12]
 8000d16:	3307      	adds	r3, #7
 8000d18:	f023 0307 	bic.w	r3, r3, #7
 8000d1c:	3308      	adds	r3, #8
 8000d1e:	9303      	str	r3, [sp, #12]
 8000d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d22:	443b      	add	r3, r7
 8000d24:	9309      	str	r3, [sp, #36]	; 0x24
 8000d26:	e767      	b.n	8000bf8 <_vfiprintf_r+0x94>
 8000d28:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d2c:	460c      	mov	r4, r1
 8000d2e:	2001      	movs	r0, #1
 8000d30:	e7a5      	b.n	8000c7e <_vfiprintf_r+0x11a>
 8000d32:	2300      	movs	r3, #0
 8000d34:	3401      	adds	r4, #1
 8000d36:	9305      	str	r3, [sp, #20]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f04f 0c0a 	mov.w	ip, #10
 8000d3e:	4620      	mov	r0, r4
 8000d40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d44:	3a30      	subs	r2, #48	; 0x30
 8000d46:	2a09      	cmp	r2, #9
 8000d48:	d903      	bls.n	8000d52 <_vfiprintf_r+0x1ee>
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d0c5      	beq.n	8000cda <_vfiprintf_r+0x176>
 8000d4e:	9105      	str	r1, [sp, #20]
 8000d50:	e7c3      	b.n	8000cda <_vfiprintf_r+0x176>
 8000d52:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d56:	4604      	mov	r4, r0
 8000d58:	2301      	movs	r3, #1
 8000d5a:	e7f0      	b.n	8000d3e <_vfiprintf_r+0x1da>
 8000d5c:	ab03      	add	r3, sp, #12
 8000d5e:	9300      	str	r3, [sp, #0]
 8000d60:	462a      	mov	r2, r5
 8000d62:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <_vfiprintf_r+0x258>)
 8000d64:	a904      	add	r1, sp, #16
 8000d66:	4630      	mov	r0, r6
 8000d68:	f3af 8000 	nop.w
 8000d6c:	4607      	mov	r7, r0
 8000d6e:	1c78      	adds	r0, r7, #1
 8000d70:	d1d6      	bne.n	8000d20 <_vfiprintf_r+0x1bc>
 8000d72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d74:	07d9      	lsls	r1, r3, #31
 8000d76:	d405      	bmi.n	8000d84 <_vfiprintf_r+0x220>
 8000d78:	89ab      	ldrh	r3, [r5, #12]
 8000d7a:	059a      	lsls	r2, r3, #22
 8000d7c:	d402      	bmi.n	8000d84 <_vfiprintf_r+0x220>
 8000d7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d80:	f7ff fe31 	bl	80009e6 <__retarget_lock_release_recursive>
 8000d84:	89ab      	ldrh	r3, [r5, #12]
 8000d86:	065b      	lsls	r3, r3, #25
 8000d88:	f53f af12 	bmi.w	8000bb0 <_vfiprintf_r+0x4c>
 8000d8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000d8e:	e711      	b.n	8000bb4 <_vfiprintf_r+0x50>
 8000d90:	ab03      	add	r3, sp, #12
 8000d92:	9300      	str	r3, [sp, #0]
 8000d94:	462a      	mov	r2, r5
 8000d96:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <_vfiprintf_r+0x258>)
 8000d98:	a904      	add	r1, sp, #16
 8000d9a:	4630      	mov	r0, r6
 8000d9c:	f000 f880 	bl	8000ea0 <_printf_i>
 8000da0:	e7e4      	b.n	8000d6c <_vfiprintf_r+0x208>
 8000da2:	bf00      	nop
 8000da4:	08001738 	.word	0x08001738
 8000da8:	08001758 	.word	0x08001758
 8000dac:	08001718 	.word	0x08001718
 8000db0:	08001778 	.word	0x08001778
 8000db4:	08001782 	.word	0x08001782
 8000db8:	00000000 	.word	0x00000000
 8000dbc:	08000b3f 	.word	0x08000b3f
 8000dc0:	0800177e 	.word	0x0800177e

08000dc4 <_printf_common>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	4616      	mov	r6, r2
 8000dca:	4699      	mov	r9, r3
 8000dcc:	688a      	ldr	r2, [r1, #8]
 8000dce:	690b      	ldr	r3, [r1, #16]
 8000dd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	bfb8      	it	lt
 8000dd8:	4613      	movlt	r3, r2
 8000dda:	6033      	str	r3, [r6, #0]
 8000ddc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000de0:	4607      	mov	r7, r0
 8000de2:	460c      	mov	r4, r1
 8000de4:	b10a      	cbz	r2, 8000dea <_printf_common+0x26>
 8000de6:	3301      	adds	r3, #1
 8000de8:	6033      	str	r3, [r6, #0]
 8000dea:	6823      	ldr	r3, [r4, #0]
 8000dec:	0699      	lsls	r1, r3, #26
 8000dee:	bf42      	ittt	mi
 8000df0:	6833      	ldrmi	r3, [r6, #0]
 8000df2:	3302      	addmi	r3, #2
 8000df4:	6033      	strmi	r3, [r6, #0]
 8000df6:	6825      	ldr	r5, [r4, #0]
 8000df8:	f015 0506 	ands.w	r5, r5, #6
 8000dfc:	d106      	bne.n	8000e0c <_printf_common+0x48>
 8000dfe:	f104 0a19 	add.w	sl, r4, #25
 8000e02:	68e3      	ldr	r3, [r4, #12]
 8000e04:	6832      	ldr	r2, [r6, #0]
 8000e06:	1a9b      	subs	r3, r3, r2
 8000e08:	42ab      	cmp	r3, r5
 8000e0a:	dc26      	bgt.n	8000e5a <_printf_common+0x96>
 8000e0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000e10:	1e13      	subs	r3, r2, #0
 8000e12:	6822      	ldr	r2, [r4, #0]
 8000e14:	bf18      	it	ne
 8000e16:	2301      	movne	r3, #1
 8000e18:	0692      	lsls	r2, r2, #26
 8000e1a:	d42b      	bmi.n	8000e74 <_printf_common+0xb0>
 8000e1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000e20:	4649      	mov	r1, r9
 8000e22:	4638      	mov	r0, r7
 8000e24:	47c0      	blx	r8
 8000e26:	3001      	adds	r0, #1
 8000e28:	d01e      	beq.n	8000e68 <_printf_common+0xa4>
 8000e2a:	6823      	ldr	r3, [r4, #0]
 8000e2c:	68e5      	ldr	r5, [r4, #12]
 8000e2e:	6832      	ldr	r2, [r6, #0]
 8000e30:	f003 0306 	and.w	r3, r3, #6
 8000e34:	2b04      	cmp	r3, #4
 8000e36:	bf08      	it	eq
 8000e38:	1aad      	subeq	r5, r5, r2
 8000e3a:	68a3      	ldr	r3, [r4, #8]
 8000e3c:	6922      	ldr	r2, [r4, #16]
 8000e3e:	bf0c      	ite	eq
 8000e40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e44:	2500      	movne	r5, #0
 8000e46:	4293      	cmp	r3, r2
 8000e48:	bfc4      	itt	gt
 8000e4a:	1a9b      	subgt	r3, r3, r2
 8000e4c:	18ed      	addgt	r5, r5, r3
 8000e4e:	2600      	movs	r6, #0
 8000e50:	341a      	adds	r4, #26
 8000e52:	42b5      	cmp	r5, r6
 8000e54:	d11a      	bne.n	8000e8c <_printf_common+0xc8>
 8000e56:	2000      	movs	r0, #0
 8000e58:	e008      	b.n	8000e6c <_printf_common+0xa8>
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	4652      	mov	r2, sl
 8000e5e:	4649      	mov	r1, r9
 8000e60:	4638      	mov	r0, r7
 8000e62:	47c0      	blx	r8
 8000e64:	3001      	adds	r0, #1
 8000e66:	d103      	bne.n	8000e70 <_printf_common+0xac>
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e70:	3501      	adds	r5, #1
 8000e72:	e7c6      	b.n	8000e02 <_printf_common+0x3e>
 8000e74:	18e1      	adds	r1, r4, r3
 8000e76:	1c5a      	adds	r2, r3, #1
 8000e78:	2030      	movs	r0, #48	; 0x30
 8000e7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000e7e:	4422      	add	r2, r4
 8000e80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000e84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000e88:	3302      	adds	r3, #2
 8000e8a:	e7c7      	b.n	8000e1c <_printf_common+0x58>
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	4622      	mov	r2, r4
 8000e90:	4649      	mov	r1, r9
 8000e92:	4638      	mov	r0, r7
 8000e94:	47c0      	blx	r8
 8000e96:	3001      	adds	r0, #1
 8000e98:	d0e6      	beq.n	8000e68 <_printf_common+0xa4>
 8000e9a:	3601      	adds	r6, #1
 8000e9c:	e7d9      	b.n	8000e52 <_printf_common+0x8e>
	...

08000ea0 <_printf_i>:
 8000ea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000ea4:	7e0f      	ldrb	r7, [r1, #24]
 8000ea6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000ea8:	2f78      	cmp	r7, #120	; 0x78
 8000eaa:	4691      	mov	r9, r2
 8000eac:	4680      	mov	r8, r0
 8000eae:	460c      	mov	r4, r1
 8000eb0:	469a      	mov	sl, r3
 8000eb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000eb6:	d807      	bhi.n	8000ec8 <_printf_i+0x28>
 8000eb8:	2f62      	cmp	r7, #98	; 0x62
 8000eba:	d80a      	bhi.n	8000ed2 <_printf_i+0x32>
 8000ebc:	2f00      	cmp	r7, #0
 8000ebe:	f000 80d8 	beq.w	8001072 <_printf_i+0x1d2>
 8000ec2:	2f58      	cmp	r7, #88	; 0x58
 8000ec4:	f000 80a3 	beq.w	800100e <_printf_i+0x16e>
 8000ec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000ecc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000ed0:	e03a      	b.n	8000f48 <_printf_i+0xa8>
 8000ed2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000ed6:	2b15      	cmp	r3, #21
 8000ed8:	d8f6      	bhi.n	8000ec8 <_printf_i+0x28>
 8000eda:	a101      	add	r1, pc, #4	; (adr r1, 8000ee0 <_printf_i+0x40>)
 8000edc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000ee0:	08000f39 	.word	0x08000f39
 8000ee4:	08000f4d 	.word	0x08000f4d
 8000ee8:	08000ec9 	.word	0x08000ec9
 8000eec:	08000ec9 	.word	0x08000ec9
 8000ef0:	08000ec9 	.word	0x08000ec9
 8000ef4:	08000ec9 	.word	0x08000ec9
 8000ef8:	08000f4d 	.word	0x08000f4d
 8000efc:	08000ec9 	.word	0x08000ec9
 8000f00:	08000ec9 	.word	0x08000ec9
 8000f04:	08000ec9 	.word	0x08000ec9
 8000f08:	08000ec9 	.word	0x08000ec9
 8000f0c:	08001059 	.word	0x08001059
 8000f10:	08000f7d 	.word	0x08000f7d
 8000f14:	0800103b 	.word	0x0800103b
 8000f18:	08000ec9 	.word	0x08000ec9
 8000f1c:	08000ec9 	.word	0x08000ec9
 8000f20:	0800107b 	.word	0x0800107b
 8000f24:	08000ec9 	.word	0x08000ec9
 8000f28:	08000f7d 	.word	0x08000f7d
 8000f2c:	08000ec9 	.word	0x08000ec9
 8000f30:	08000ec9 	.word	0x08000ec9
 8000f34:	08001043 	.word	0x08001043
 8000f38:	682b      	ldr	r3, [r5, #0]
 8000f3a:	1d1a      	adds	r2, r3, #4
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	602a      	str	r2, [r5, #0]
 8000f40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000f48:	2301      	movs	r3, #1
 8000f4a:	e0a3      	b.n	8001094 <_printf_i+0x1f4>
 8000f4c:	6820      	ldr	r0, [r4, #0]
 8000f4e:	6829      	ldr	r1, [r5, #0]
 8000f50:	0606      	lsls	r6, r0, #24
 8000f52:	f101 0304 	add.w	r3, r1, #4
 8000f56:	d50a      	bpl.n	8000f6e <_printf_i+0xce>
 8000f58:	680e      	ldr	r6, [r1, #0]
 8000f5a:	602b      	str	r3, [r5, #0]
 8000f5c:	2e00      	cmp	r6, #0
 8000f5e:	da03      	bge.n	8000f68 <_printf_i+0xc8>
 8000f60:	232d      	movs	r3, #45	; 0x2d
 8000f62:	4276      	negs	r6, r6
 8000f64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f68:	485e      	ldr	r0, [pc, #376]	; (80010e4 <_printf_i+0x244>)
 8000f6a:	230a      	movs	r3, #10
 8000f6c:	e019      	b.n	8000fa2 <_printf_i+0x102>
 8000f6e:	680e      	ldr	r6, [r1, #0]
 8000f70:	602b      	str	r3, [r5, #0]
 8000f72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000f76:	bf18      	it	ne
 8000f78:	b236      	sxthne	r6, r6
 8000f7a:	e7ef      	b.n	8000f5c <_printf_i+0xbc>
 8000f7c:	682b      	ldr	r3, [r5, #0]
 8000f7e:	6820      	ldr	r0, [r4, #0]
 8000f80:	1d19      	adds	r1, r3, #4
 8000f82:	6029      	str	r1, [r5, #0]
 8000f84:	0601      	lsls	r1, r0, #24
 8000f86:	d501      	bpl.n	8000f8c <_printf_i+0xec>
 8000f88:	681e      	ldr	r6, [r3, #0]
 8000f8a:	e002      	b.n	8000f92 <_printf_i+0xf2>
 8000f8c:	0646      	lsls	r6, r0, #25
 8000f8e:	d5fb      	bpl.n	8000f88 <_printf_i+0xe8>
 8000f90:	881e      	ldrh	r6, [r3, #0]
 8000f92:	4854      	ldr	r0, [pc, #336]	; (80010e4 <_printf_i+0x244>)
 8000f94:	2f6f      	cmp	r7, #111	; 0x6f
 8000f96:	bf0c      	ite	eq
 8000f98:	2308      	moveq	r3, #8
 8000f9a:	230a      	movne	r3, #10
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000fa2:	6865      	ldr	r5, [r4, #4]
 8000fa4:	60a5      	str	r5, [r4, #8]
 8000fa6:	2d00      	cmp	r5, #0
 8000fa8:	bfa2      	ittt	ge
 8000faa:	6821      	ldrge	r1, [r4, #0]
 8000fac:	f021 0104 	bicge.w	r1, r1, #4
 8000fb0:	6021      	strge	r1, [r4, #0]
 8000fb2:	b90e      	cbnz	r6, 8000fb8 <_printf_i+0x118>
 8000fb4:	2d00      	cmp	r5, #0
 8000fb6:	d04d      	beq.n	8001054 <_printf_i+0x1b4>
 8000fb8:	4615      	mov	r5, r2
 8000fba:	fbb6 f1f3 	udiv	r1, r6, r3
 8000fbe:	fb03 6711 	mls	r7, r3, r1, r6
 8000fc2:	5dc7      	ldrb	r7, [r0, r7]
 8000fc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000fc8:	4637      	mov	r7, r6
 8000fca:	42bb      	cmp	r3, r7
 8000fcc:	460e      	mov	r6, r1
 8000fce:	d9f4      	bls.n	8000fba <_printf_i+0x11a>
 8000fd0:	2b08      	cmp	r3, #8
 8000fd2:	d10b      	bne.n	8000fec <_printf_i+0x14c>
 8000fd4:	6823      	ldr	r3, [r4, #0]
 8000fd6:	07de      	lsls	r6, r3, #31
 8000fd8:	d508      	bpl.n	8000fec <_printf_i+0x14c>
 8000fda:	6923      	ldr	r3, [r4, #16]
 8000fdc:	6861      	ldr	r1, [r4, #4]
 8000fde:	4299      	cmp	r1, r3
 8000fe0:	bfde      	ittt	le
 8000fe2:	2330      	movle	r3, #48	; 0x30
 8000fe4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000fe8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8000fec:	1b52      	subs	r2, r2, r5
 8000fee:	6122      	str	r2, [r4, #16]
 8000ff0:	f8cd a000 	str.w	sl, [sp]
 8000ff4:	464b      	mov	r3, r9
 8000ff6:	aa03      	add	r2, sp, #12
 8000ff8:	4621      	mov	r1, r4
 8000ffa:	4640      	mov	r0, r8
 8000ffc:	f7ff fee2 	bl	8000dc4 <_printf_common>
 8001000:	3001      	adds	r0, #1
 8001002:	d14c      	bne.n	800109e <_printf_i+0x1fe>
 8001004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001008:	b004      	add	sp, #16
 800100a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800100e:	4835      	ldr	r0, [pc, #212]	; (80010e4 <_printf_i+0x244>)
 8001010:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001014:	6829      	ldr	r1, [r5, #0]
 8001016:	6823      	ldr	r3, [r4, #0]
 8001018:	f851 6b04 	ldr.w	r6, [r1], #4
 800101c:	6029      	str	r1, [r5, #0]
 800101e:	061d      	lsls	r5, r3, #24
 8001020:	d514      	bpl.n	800104c <_printf_i+0x1ac>
 8001022:	07df      	lsls	r7, r3, #31
 8001024:	bf44      	itt	mi
 8001026:	f043 0320 	orrmi.w	r3, r3, #32
 800102a:	6023      	strmi	r3, [r4, #0]
 800102c:	b91e      	cbnz	r6, 8001036 <_printf_i+0x196>
 800102e:	6823      	ldr	r3, [r4, #0]
 8001030:	f023 0320 	bic.w	r3, r3, #32
 8001034:	6023      	str	r3, [r4, #0]
 8001036:	2310      	movs	r3, #16
 8001038:	e7b0      	b.n	8000f9c <_printf_i+0xfc>
 800103a:	6823      	ldr	r3, [r4, #0]
 800103c:	f043 0320 	orr.w	r3, r3, #32
 8001040:	6023      	str	r3, [r4, #0]
 8001042:	2378      	movs	r3, #120	; 0x78
 8001044:	4828      	ldr	r0, [pc, #160]	; (80010e8 <_printf_i+0x248>)
 8001046:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800104a:	e7e3      	b.n	8001014 <_printf_i+0x174>
 800104c:	0659      	lsls	r1, r3, #25
 800104e:	bf48      	it	mi
 8001050:	b2b6      	uxthmi	r6, r6
 8001052:	e7e6      	b.n	8001022 <_printf_i+0x182>
 8001054:	4615      	mov	r5, r2
 8001056:	e7bb      	b.n	8000fd0 <_printf_i+0x130>
 8001058:	682b      	ldr	r3, [r5, #0]
 800105a:	6826      	ldr	r6, [r4, #0]
 800105c:	6961      	ldr	r1, [r4, #20]
 800105e:	1d18      	adds	r0, r3, #4
 8001060:	6028      	str	r0, [r5, #0]
 8001062:	0635      	lsls	r5, r6, #24
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	d501      	bpl.n	800106c <_printf_i+0x1cc>
 8001068:	6019      	str	r1, [r3, #0]
 800106a:	e002      	b.n	8001072 <_printf_i+0x1d2>
 800106c:	0670      	lsls	r0, r6, #25
 800106e:	d5fb      	bpl.n	8001068 <_printf_i+0x1c8>
 8001070:	8019      	strh	r1, [r3, #0]
 8001072:	2300      	movs	r3, #0
 8001074:	6123      	str	r3, [r4, #16]
 8001076:	4615      	mov	r5, r2
 8001078:	e7ba      	b.n	8000ff0 <_printf_i+0x150>
 800107a:	682b      	ldr	r3, [r5, #0]
 800107c:	1d1a      	adds	r2, r3, #4
 800107e:	602a      	str	r2, [r5, #0]
 8001080:	681d      	ldr	r5, [r3, #0]
 8001082:	6862      	ldr	r2, [r4, #4]
 8001084:	2100      	movs	r1, #0
 8001086:	4628      	mov	r0, r5
 8001088:	f7ff f87a 	bl	8000180 <memchr>
 800108c:	b108      	cbz	r0, 8001092 <_printf_i+0x1f2>
 800108e:	1b40      	subs	r0, r0, r5
 8001090:	6060      	str	r0, [r4, #4]
 8001092:	6863      	ldr	r3, [r4, #4]
 8001094:	6123      	str	r3, [r4, #16]
 8001096:	2300      	movs	r3, #0
 8001098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800109c:	e7a8      	b.n	8000ff0 <_printf_i+0x150>
 800109e:	6923      	ldr	r3, [r4, #16]
 80010a0:	462a      	mov	r2, r5
 80010a2:	4649      	mov	r1, r9
 80010a4:	4640      	mov	r0, r8
 80010a6:	47d0      	blx	sl
 80010a8:	3001      	adds	r0, #1
 80010aa:	d0ab      	beq.n	8001004 <_printf_i+0x164>
 80010ac:	6823      	ldr	r3, [r4, #0]
 80010ae:	079b      	lsls	r3, r3, #30
 80010b0:	d413      	bmi.n	80010da <_printf_i+0x23a>
 80010b2:	68e0      	ldr	r0, [r4, #12]
 80010b4:	9b03      	ldr	r3, [sp, #12]
 80010b6:	4298      	cmp	r0, r3
 80010b8:	bfb8      	it	lt
 80010ba:	4618      	movlt	r0, r3
 80010bc:	e7a4      	b.n	8001008 <_printf_i+0x168>
 80010be:	2301      	movs	r3, #1
 80010c0:	4632      	mov	r2, r6
 80010c2:	4649      	mov	r1, r9
 80010c4:	4640      	mov	r0, r8
 80010c6:	47d0      	blx	sl
 80010c8:	3001      	adds	r0, #1
 80010ca:	d09b      	beq.n	8001004 <_printf_i+0x164>
 80010cc:	3501      	adds	r5, #1
 80010ce:	68e3      	ldr	r3, [r4, #12]
 80010d0:	9903      	ldr	r1, [sp, #12]
 80010d2:	1a5b      	subs	r3, r3, r1
 80010d4:	42ab      	cmp	r3, r5
 80010d6:	dcf2      	bgt.n	80010be <_printf_i+0x21e>
 80010d8:	e7eb      	b.n	80010b2 <_printf_i+0x212>
 80010da:	2500      	movs	r5, #0
 80010dc:	f104 0619 	add.w	r6, r4, #25
 80010e0:	e7f5      	b.n	80010ce <_printf_i+0x22e>
 80010e2:	bf00      	nop
 80010e4:	08001789 	.word	0x08001789
 80010e8:	0800179a 	.word	0x0800179a

080010ec <_sbrk_r>:
 80010ec:	b538      	push	{r3, r4, r5, lr}
 80010ee:	4d06      	ldr	r5, [pc, #24]	; (8001108 <_sbrk_r+0x1c>)
 80010f0:	2300      	movs	r3, #0
 80010f2:	4604      	mov	r4, r0
 80010f4:	4608      	mov	r0, r1
 80010f6:	602b      	str	r3, [r5, #0]
 80010f8:	f7ff fa3c 	bl	8000574 <_sbrk>
 80010fc:	1c43      	adds	r3, r0, #1
 80010fe:	d102      	bne.n	8001106 <_sbrk_r+0x1a>
 8001100:	682b      	ldr	r3, [r5, #0]
 8001102:	b103      	cbz	r3, 8001106 <_sbrk_r+0x1a>
 8001104:	6023      	str	r3, [r4, #0]
 8001106:	bd38      	pop	{r3, r4, r5, pc}
 8001108:	20000098 	.word	0x20000098

0800110c <__sread>:
 800110c:	b510      	push	{r4, lr}
 800110e:	460c      	mov	r4, r1
 8001110:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001114:	f000 fab2 	bl	800167c <_read_r>
 8001118:	2800      	cmp	r0, #0
 800111a:	bfab      	itete	ge
 800111c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800111e:	89a3      	ldrhlt	r3, [r4, #12]
 8001120:	181b      	addge	r3, r3, r0
 8001122:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001126:	bfac      	ite	ge
 8001128:	6563      	strge	r3, [r4, #84]	; 0x54
 800112a:	81a3      	strhlt	r3, [r4, #12]
 800112c:	bd10      	pop	{r4, pc}

0800112e <__swrite>:
 800112e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001132:	461f      	mov	r7, r3
 8001134:	898b      	ldrh	r3, [r1, #12]
 8001136:	05db      	lsls	r3, r3, #23
 8001138:	4605      	mov	r5, r0
 800113a:	460c      	mov	r4, r1
 800113c:	4616      	mov	r6, r2
 800113e:	d505      	bpl.n	800114c <__swrite+0x1e>
 8001140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001144:	2302      	movs	r3, #2
 8001146:	2200      	movs	r2, #0
 8001148:	f000 f9c8 	bl	80014dc <_lseek_r>
 800114c:	89a3      	ldrh	r3, [r4, #12]
 800114e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001152:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001156:	81a3      	strh	r3, [r4, #12]
 8001158:	4632      	mov	r2, r6
 800115a:	463b      	mov	r3, r7
 800115c:	4628      	mov	r0, r5
 800115e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001162:	f000 b869 	b.w	8001238 <_write_r>

08001166 <__sseek>:
 8001166:	b510      	push	{r4, lr}
 8001168:	460c      	mov	r4, r1
 800116a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800116e:	f000 f9b5 	bl	80014dc <_lseek_r>
 8001172:	1c43      	adds	r3, r0, #1
 8001174:	89a3      	ldrh	r3, [r4, #12]
 8001176:	bf15      	itete	ne
 8001178:	6560      	strne	r0, [r4, #84]	; 0x54
 800117a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800117e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001182:	81a3      	strheq	r3, [r4, #12]
 8001184:	bf18      	it	ne
 8001186:	81a3      	strhne	r3, [r4, #12]
 8001188:	bd10      	pop	{r4, pc}

0800118a <__sclose>:
 800118a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800118e:	f000 b8d3 	b.w	8001338 <_close_r>
	...

08001194 <__swbuf_r>:
 8001194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001196:	460e      	mov	r6, r1
 8001198:	4614      	mov	r4, r2
 800119a:	4605      	mov	r5, r0
 800119c:	b118      	cbz	r0, 80011a6 <__swbuf_r+0x12>
 800119e:	6983      	ldr	r3, [r0, #24]
 80011a0:	b90b      	cbnz	r3, 80011a6 <__swbuf_r+0x12>
 80011a2:	f7ff fb81 	bl	80008a8 <__sinit>
 80011a6:	4b21      	ldr	r3, [pc, #132]	; (800122c <__swbuf_r+0x98>)
 80011a8:	429c      	cmp	r4, r3
 80011aa:	d12b      	bne.n	8001204 <__swbuf_r+0x70>
 80011ac:	686c      	ldr	r4, [r5, #4]
 80011ae:	69a3      	ldr	r3, [r4, #24]
 80011b0:	60a3      	str	r3, [r4, #8]
 80011b2:	89a3      	ldrh	r3, [r4, #12]
 80011b4:	071a      	lsls	r2, r3, #28
 80011b6:	d52f      	bpl.n	8001218 <__swbuf_r+0x84>
 80011b8:	6923      	ldr	r3, [r4, #16]
 80011ba:	b36b      	cbz	r3, 8001218 <__swbuf_r+0x84>
 80011bc:	6923      	ldr	r3, [r4, #16]
 80011be:	6820      	ldr	r0, [r4, #0]
 80011c0:	1ac0      	subs	r0, r0, r3
 80011c2:	6963      	ldr	r3, [r4, #20]
 80011c4:	b2f6      	uxtb	r6, r6
 80011c6:	4283      	cmp	r3, r0
 80011c8:	4637      	mov	r7, r6
 80011ca:	dc04      	bgt.n	80011d6 <__swbuf_r+0x42>
 80011cc:	4621      	mov	r1, r4
 80011ce:	4628      	mov	r0, r5
 80011d0:	f000 f948 	bl	8001464 <_fflush_r>
 80011d4:	bb30      	cbnz	r0, 8001224 <__swbuf_r+0x90>
 80011d6:	68a3      	ldr	r3, [r4, #8]
 80011d8:	3b01      	subs	r3, #1
 80011da:	60a3      	str	r3, [r4, #8]
 80011dc:	6823      	ldr	r3, [r4, #0]
 80011de:	1c5a      	adds	r2, r3, #1
 80011e0:	6022      	str	r2, [r4, #0]
 80011e2:	701e      	strb	r6, [r3, #0]
 80011e4:	6963      	ldr	r3, [r4, #20]
 80011e6:	3001      	adds	r0, #1
 80011e8:	4283      	cmp	r3, r0
 80011ea:	d004      	beq.n	80011f6 <__swbuf_r+0x62>
 80011ec:	89a3      	ldrh	r3, [r4, #12]
 80011ee:	07db      	lsls	r3, r3, #31
 80011f0:	d506      	bpl.n	8001200 <__swbuf_r+0x6c>
 80011f2:	2e0a      	cmp	r6, #10
 80011f4:	d104      	bne.n	8001200 <__swbuf_r+0x6c>
 80011f6:	4621      	mov	r1, r4
 80011f8:	4628      	mov	r0, r5
 80011fa:	f000 f933 	bl	8001464 <_fflush_r>
 80011fe:	b988      	cbnz	r0, 8001224 <__swbuf_r+0x90>
 8001200:	4638      	mov	r0, r7
 8001202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001204:	4b0a      	ldr	r3, [pc, #40]	; (8001230 <__swbuf_r+0x9c>)
 8001206:	429c      	cmp	r4, r3
 8001208:	d101      	bne.n	800120e <__swbuf_r+0x7a>
 800120a:	68ac      	ldr	r4, [r5, #8]
 800120c:	e7cf      	b.n	80011ae <__swbuf_r+0x1a>
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <__swbuf_r+0xa0>)
 8001210:	429c      	cmp	r4, r3
 8001212:	bf08      	it	eq
 8001214:	68ec      	ldreq	r4, [r5, #12]
 8001216:	e7ca      	b.n	80011ae <__swbuf_r+0x1a>
 8001218:	4621      	mov	r1, r4
 800121a:	4628      	mov	r0, r5
 800121c:	f000 f81e 	bl	800125c <__swsetup_r>
 8001220:	2800      	cmp	r0, #0
 8001222:	d0cb      	beq.n	80011bc <__swbuf_r+0x28>
 8001224:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001228:	e7ea      	b.n	8001200 <__swbuf_r+0x6c>
 800122a:	bf00      	nop
 800122c:	08001738 	.word	0x08001738
 8001230:	08001758 	.word	0x08001758
 8001234:	08001718 	.word	0x08001718

08001238 <_write_r>:
 8001238:	b538      	push	{r3, r4, r5, lr}
 800123a:	4d07      	ldr	r5, [pc, #28]	; (8001258 <_write_r+0x20>)
 800123c:	4604      	mov	r4, r0
 800123e:	4608      	mov	r0, r1
 8001240:	4611      	mov	r1, r2
 8001242:	2200      	movs	r2, #0
 8001244:	602a      	str	r2, [r5, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	f7ff f943 	bl	80004d2 <_write>
 800124c:	1c43      	adds	r3, r0, #1
 800124e:	d102      	bne.n	8001256 <_write_r+0x1e>
 8001250:	682b      	ldr	r3, [r5, #0]
 8001252:	b103      	cbz	r3, 8001256 <_write_r+0x1e>
 8001254:	6023      	str	r3, [r4, #0]
 8001256:	bd38      	pop	{r3, r4, r5, pc}
 8001258:	20000098 	.word	0x20000098

0800125c <__swsetup_r>:
 800125c:	4b32      	ldr	r3, [pc, #200]	; (8001328 <__swsetup_r+0xcc>)
 800125e:	b570      	push	{r4, r5, r6, lr}
 8001260:	681d      	ldr	r5, [r3, #0]
 8001262:	4606      	mov	r6, r0
 8001264:	460c      	mov	r4, r1
 8001266:	b125      	cbz	r5, 8001272 <__swsetup_r+0x16>
 8001268:	69ab      	ldr	r3, [r5, #24]
 800126a:	b913      	cbnz	r3, 8001272 <__swsetup_r+0x16>
 800126c:	4628      	mov	r0, r5
 800126e:	f7ff fb1b 	bl	80008a8 <__sinit>
 8001272:	4b2e      	ldr	r3, [pc, #184]	; (800132c <__swsetup_r+0xd0>)
 8001274:	429c      	cmp	r4, r3
 8001276:	d10f      	bne.n	8001298 <__swsetup_r+0x3c>
 8001278:	686c      	ldr	r4, [r5, #4]
 800127a:	89a3      	ldrh	r3, [r4, #12]
 800127c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001280:	0719      	lsls	r1, r3, #28
 8001282:	d42c      	bmi.n	80012de <__swsetup_r+0x82>
 8001284:	06dd      	lsls	r5, r3, #27
 8001286:	d411      	bmi.n	80012ac <__swsetup_r+0x50>
 8001288:	2309      	movs	r3, #9
 800128a:	6033      	str	r3, [r6, #0]
 800128c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001290:	81a3      	strh	r3, [r4, #12]
 8001292:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001296:	e03e      	b.n	8001316 <__swsetup_r+0xba>
 8001298:	4b25      	ldr	r3, [pc, #148]	; (8001330 <__swsetup_r+0xd4>)
 800129a:	429c      	cmp	r4, r3
 800129c:	d101      	bne.n	80012a2 <__swsetup_r+0x46>
 800129e:	68ac      	ldr	r4, [r5, #8]
 80012a0:	e7eb      	b.n	800127a <__swsetup_r+0x1e>
 80012a2:	4b24      	ldr	r3, [pc, #144]	; (8001334 <__swsetup_r+0xd8>)
 80012a4:	429c      	cmp	r4, r3
 80012a6:	bf08      	it	eq
 80012a8:	68ec      	ldreq	r4, [r5, #12]
 80012aa:	e7e6      	b.n	800127a <__swsetup_r+0x1e>
 80012ac:	0758      	lsls	r0, r3, #29
 80012ae:	d512      	bpl.n	80012d6 <__swsetup_r+0x7a>
 80012b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012b2:	b141      	cbz	r1, 80012c6 <__swsetup_r+0x6a>
 80012b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80012b8:	4299      	cmp	r1, r3
 80012ba:	d002      	beq.n	80012c2 <__swsetup_r+0x66>
 80012bc:	4630      	mov	r0, r6
 80012be:	f000 f991 	bl	80015e4 <_free_r>
 80012c2:	2300      	movs	r3, #0
 80012c4:	6363      	str	r3, [r4, #52]	; 0x34
 80012c6:	89a3      	ldrh	r3, [r4, #12]
 80012c8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80012cc:	81a3      	strh	r3, [r4, #12]
 80012ce:	2300      	movs	r3, #0
 80012d0:	6063      	str	r3, [r4, #4]
 80012d2:	6923      	ldr	r3, [r4, #16]
 80012d4:	6023      	str	r3, [r4, #0]
 80012d6:	89a3      	ldrh	r3, [r4, #12]
 80012d8:	f043 0308 	orr.w	r3, r3, #8
 80012dc:	81a3      	strh	r3, [r4, #12]
 80012de:	6923      	ldr	r3, [r4, #16]
 80012e0:	b94b      	cbnz	r3, 80012f6 <__swsetup_r+0x9a>
 80012e2:	89a3      	ldrh	r3, [r4, #12]
 80012e4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80012e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012ec:	d003      	beq.n	80012f6 <__swsetup_r+0x9a>
 80012ee:	4621      	mov	r1, r4
 80012f0:	4630      	mov	r0, r6
 80012f2:	f000 f92b 	bl	800154c <__smakebuf_r>
 80012f6:	89a0      	ldrh	r0, [r4, #12]
 80012f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80012fc:	f010 0301 	ands.w	r3, r0, #1
 8001300:	d00a      	beq.n	8001318 <__swsetup_r+0xbc>
 8001302:	2300      	movs	r3, #0
 8001304:	60a3      	str	r3, [r4, #8]
 8001306:	6963      	ldr	r3, [r4, #20]
 8001308:	425b      	negs	r3, r3
 800130a:	61a3      	str	r3, [r4, #24]
 800130c:	6923      	ldr	r3, [r4, #16]
 800130e:	b943      	cbnz	r3, 8001322 <__swsetup_r+0xc6>
 8001310:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001314:	d1ba      	bne.n	800128c <__swsetup_r+0x30>
 8001316:	bd70      	pop	{r4, r5, r6, pc}
 8001318:	0781      	lsls	r1, r0, #30
 800131a:	bf58      	it	pl
 800131c:	6963      	ldrpl	r3, [r4, #20]
 800131e:	60a3      	str	r3, [r4, #8]
 8001320:	e7f4      	b.n	800130c <__swsetup_r+0xb0>
 8001322:	2000      	movs	r0, #0
 8001324:	e7f7      	b.n	8001316 <__swsetup_r+0xba>
 8001326:	bf00      	nop
 8001328:	20000004 	.word	0x20000004
 800132c:	08001738 	.word	0x08001738
 8001330:	08001758 	.word	0x08001758
 8001334:	08001718 	.word	0x08001718

08001338 <_close_r>:
 8001338:	b538      	push	{r3, r4, r5, lr}
 800133a:	4d06      	ldr	r5, [pc, #24]	; (8001354 <_close_r+0x1c>)
 800133c:	2300      	movs	r3, #0
 800133e:	4604      	mov	r4, r0
 8001340:	4608      	mov	r0, r1
 8001342:	602b      	str	r3, [r5, #0]
 8001344:	f7ff f8e1 	bl	800050a <_close>
 8001348:	1c43      	adds	r3, r0, #1
 800134a:	d102      	bne.n	8001352 <_close_r+0x1a>
 800134c:	682b      	ldr	r3, [r5, #0]
 800134e:	b103      	cbz	r3, 8001352 <_close_r+0x1a>
 8001350:	6023      	str	r3, [r4, #0]
 8001352:	bd38      	pop	{r3, r4, r5, pc}
 8001354:	20000098 	.word	0x20000098

08001358 <__sflush_r>:
 8001358:	898a      	ldrh	r2, [r1, #12]
 800135a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800135e:	4605      	mov	r5, r0
 8001360:	0710      	lsls	r0, r2, #28
 8001362:	460c      	mov	r4, r1
 8001364:	d458      	bmi.n	8001418 <__sflush_r+0xc0>
 8001366:	684b      	ldr	r3, [r1, #4]
 8001368:	2b00      	cmp	r3, #0
 800136a:	dc05      	bgt.n	8001378 <__sflush_r+0x20>
 800136c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800136e:	2b00      	cmp	r3, #0
 8001370:	dc02      	bgt.n	8001378 <__sflush_r+0x20>
 8001372:	2000      	movs	r0, #0
 8001374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001378:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800137a:	2e00      	cmp	r6, #0
 800137c:	d0f9      	beq.n	8001372 <__sflush_r+0x1a>
 800137e:	2300      	movs	r3, #0
 8001380:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001384:	682f      	ldr	r7, [r5, #0]
 8001386:	602b      	str	r3, [r5, #0]
 8001388:	d032      	beq.n	80013f0 <__sflush_r+0x98>
 800138a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800138c:	89a3      	ldrh	r3, [r4, #12]
 800138e:	075a      	lsls	r2, r3, #29
 8001390:	d505      	bpl.n	800139e <__sflush_r+0x46>
 8001392:	6863      	ldr	r3, [r4, #4]
 8001394:	1ac0      	subs	r0, r0, r3
 8001396:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001398:	b10b      	cbz	r3, 800139e <__sflush_r+0x46>
 800139a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800139c:	1ac0      	subs	r0, r0, r3
 800139e:	2300      	movs	r3, #0
 80013a0:	4602      	mov	r2, r0
 80013a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80013a4:	6a21      	ldr	r1, [r4, #32]
 80013a6:	4628      	mov	r0, r5
 80013a8:	47b0      	blx	r6
 80013aa:	1c43      	adds	r3, r0, #1
 80013ac:	89a3      	ldrh	r3, [r4, #12]
 80013ae:	d106      	bne.n	80013be <__sflush_r+0x66>
 80013b0:	6829      	ldr	r1, [r5, #0]
 80013b2:	291d      	cmp	r1, #29
 80013b4:	d82c      	bhi.n	8001410 <__sflush_r+0xb8>
 80013b6:	4a2a      	ldr	r2, [pc, #168]	; (8001460 <__sflush_r+0x108>)
 80013b8:	40ca      	lsrs	r2, r1
 80013ba:	07d6      	lsls	r6, r2, #31
 80013bc:	d528      	bpl.n	8001410 <__sflush_r+0xb8>
 80013be:	2200      	movs	r2, #0
 80013c0:	6062      	str	r2, [r4, #4]
 80013c2:	04d9      	lsls	r1, r3, #19
 80013c4:	6922      	ldr	r2, [r4, #16]
 80013c6:	6022      	str	r2, [r4, #0]
 80013c8:	d504      	bpl.n	80013d4 <__sflush_r+0x7c>
 80013ca:	1c42      	adds	r2, r0, #1
 80013cc:	d101      	bne.n	80013d2 <__sflush_r+0x7a>
 80013ce:	682b      	ldr	r3, [r5, #0]
 80013d0:	b903      	cbnz	r3, 80013d4 <__sflush_r+0x7c>
 80013d2:	6560      	str	r0, [r4, #84]	; 0x54
 80013d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80013d6:	602f      	str	r7, [r5, #0]
 80013d8:	2900      	cmp	r1, #0
 80013da:	d0ca      	beq.n	8001372 <__sflush_r+0x1a>
 80013dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80013e0:	4299      	cmp	r1, r3
 80013e2:	d002      	beq.n	80013ea <__sflush_r+0x92>
 80013e4:	4628      	mov	r0, r5
 80013e6:	f000 f8fd 	bl	80015e4 <_free_r>
 80013ea:	2000      	movs	r0, #0
 80013ec:	6360      	str	r0, [r4, #52]	; 0x34
 80013ee:	e7c1      	b.n	8001374 <__sflush_r+0x1c>
 80013f0:	6a21      	ldr	r1, [r4, #32]
 80013f2:	2301      	movs	r3, #1
 80013f4:	4628      	mov	r0, r5
 80013f6:	47b0      	blx	r6
 80013f8:	1c41      	adds	r1, r0, #1
 80013fa:	d1c7      	bne.n	800138c <__sflush_r+0x34>
 80013fc:	682b      	ldr	r3, [r5, #0]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d0c4      	beq.n	800138c <__sflush_r+0x34>
 8001402:	2b1d      	cmp	r3, #29
 8001404:	d001      	beq.n	800140a <__sflush_r+0xb2>
 8001406:	2b16      	cmp	r3, #22
 8001408:	d101      	bne.n	800140e <__sflush_r+0xb6>
 800140a:	602f      	str	r7, [r5, #0]
 800140c:	e7b1      	b.n	8001372 <__sflush_r+0x1a>
 800140e:	89a3      	ldrh	r3, [r4, #12]
 8001410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001414:	81a3      	strh	r3, [r4, #12]
 8001416:	e7ad      	b.n	8001374 <__sflush_r+0x1c>
 8001418:	690f      	ldr	r7, [r1, #16]
 800141a:	2f00      	cmp	r7, #0
 800141c:	d0a9      	beq.n	8001372 <__sflush_r+0x1a>
 800141e:	0793      	lsls	r3, r2, #30
 8001420:	680e      	ldr	r6, [r1, #0]
 8001422:	bf08      	it	eq
 8001424:	694b      	ldreq	r3, [r1, #20]
 8001426:	600f      	str	r7, [r1, #0]
 8001428:	bf18      	it	ne
 800142a:	2300      	movne	r3, #0
 800142c:	eba6 0807 	sub.w	r8, r6, r7
 8001430:	608b      	str	r3, [r1, #8]
 8001432:	f1b8 0f00 	cmp.w	r8, #0
 8001436:	dd9c      	ble.n	8001372 <__sflush_r+0x1a>
 8001438:	6a21      	ldr	r1, [r4, #32]
 800143a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800143c:	4643      	mov	r3, r8
 800143e:	463a      	mov	r2, r7
 8001440:	4628      	mov	r0, r5
 8001442:	47b0      	blx	r6
 8001444:	2800      	cmp	r0, #0
 8001446:	dc06      	bgt.n	8001456 <__sflush_r+0xfe>
 8001448:	89a3      	ldrh	r3, [r4, #12]
 800144a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800144e:	81a3      	strh	r3, [r4, #12]
 8001450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001454:	e78e      	b.n	8001374 <__sflush_r+0x1c>
 8001456:	4407      	add	r7, r0
 8001458:	eba8 0800 	sub.w	r8, r8, r0
 800145c:	e7e9      	b.n	8001432 <__sflush_r+0xda>
 800145e:	bf00      	nop
 8001460:	20400001 	.word	0x20400001

08001464 <_fflush_r>:
 8001464:	b538      	push	{r3, r4, r5, lr}
 8001466:	690b      	ldr	r3, [r1, #16]
 8001468:	4605      	mov	r5, r0
 800146a:	460c      	mov	r4, r1
 800146c:	b913      	cbnz	r3, 8001474 <_fflush_r+0x10>
 800146e:	2500      	movs	r5, #0
 8001470:	4628      	mov	r0, r5
 8001472:	bd38      	pop	{r3, r4, r5, pc}
 8001474:	b118      	cbz	r0, 800147e <_fflush_r+0x1a>
 8001476:	6983      	ldr	r3, [r0, #24]
 8001478:	b90b      	cbnz	r3, 800147e <_fflush_r+0x1a>
 800147a:	f7ff fa15 	bl	80008a8 <__sinit>
 800147e:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <_fflush_r+0x6c>)
 8001480:	429c      	cmp	r4, r3
 8001482:	d11b      	bne.n	80014bc <_fflush_r+0x58>
 8001484:	686c      	ldr	r4, [r5, #4]
 8001486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0ef      	beq.n	800146e <_fflush_r+0xa>
 800148e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001490:	07d0      	lsls	r0, r2, #31
 8001492:	d404      	bmi.n	800149e <_fflush_r+0x3a>
 8001494:	0599      	lsls	r1, r3, #22
 8001496:	d402      	bmi.n	800149e <_fflush_r+0x3a>
 8001498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800149a:	f7ff faa3 	bl	80009e4 <__retarget_lock_acquire_recursive>
 800149e:	4628      	mov	r0, r5
 80014a0:	4621      	mov	r1, r4
 80014a2:	f7ff ff59 	bl	8001358 <__sflush_r>
 80014a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80014a8:	07da      	lsls	r2, r3, #31
 80014aa:	4605      	mov	r5, r0
 80014ac:	d4e0      	bmi.n	8001470 <_fflush_r+0xc>
 80014ae:	89a3      	ldrh	r3, [r4, #12]
 80014b0:	059b      	lsls	r3, r3, #22
 80014b2:	d4dd      	bmi.n	8001470 <_fflush_r+0xc>
 80014b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014b6:	f7ff fa96 	bl	80009e6 <__retarget_lock_release_recursive>
 80014ba:	e7d9      	b.n	8001470 <_fflush_r+0xc>
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <_fflush_r+0x70>)
 80014be:	429c      	cmp	r4, r3
 80014c0:	d101      	bne.n	80014c6 <_fflush_r+0x62>
 80014c2:	68ac      	ldr	r4, [r5, #8]
 80014c4:	e7df      	b.n	8001486 <_fflush_r+0x22>
 80014c6:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <_fflush_r+0x74>)
 80014c8:	429c      	cmp	r4, r3
 80014ca:	bf08      	it	eq
 80014cc:	68ec      	ldreq	r4, [r5, #12]
 80014ce:	e7da      	b.n	8001486 <_fflush_r+0x22>
 80014d0:	08001738 	.word	0x08001738
 80014d4:	08001758 	.word	0x08001758
 80014d8:	08001718 	.word	0x08001718

080014dc <_lseek_r>:
 80014dc:	b538      	push	{r3, r4, r5, lr}
 80014de:	4d07      	ldr	r5, [pc, #28]	; (80014fc <_lseek_r+0x20>)
 80014e0:	4604      	mov	r4, r0
 80014e2:	4608      	mov	r0, r1
 80014e4:	4611      	mov	r1, r2
 80014e6:	2200      	movs	r2, #0
 80014e8:	602a      	str	r2, [r5, #0]
 80014ea:	461a      	mov	r2, r3
 80014ec:	f7ff f834 	bl	8000558 <_lseek>
 80014f0:	1c43      	adds	r3, r0, #1
 80014f2:	d102      	bne.n	80014fa <_lseek_r+0x1e>
 80014f4:	682b      	ldr	r3, [r5, #0]
 80014f6:	b103      	cbz	r3, 80014fa <_lseek_r+0x1e>
 80014f8:	6023      	str	r3, [r4, #0]
 80014fa:	bd38      	pop	{r3, r4, r5, pc}
 80014fc:	20000098 	.word	0x20000098

08001500 <__swhatbuf_r>:
 8001500:	b570      	push	{r4, r5, r6, lr}
 8001502:	460e      	mov	r6, r1
 8001504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001508:	2900      	cmp	r1, #0
 800150a:	b096      	sub	sp, #88	; 0x58
 800150c:	4614      	mov	r4, r2
 800150e:	461d      	mov	r5, r3
 8001510:	da08      	bge.n	8001524 <__swhatbuf_r+0x24>
 8001512:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001516:	2200      	movs	r2, #0
 8001518:	602a      	str	r2, [r5, #0]
 800151a:	061a      	lsls	r2, r3, #24
 800151c:	d410      	bmi.n	8001540 <__swhatbuf_r+0x40>
 800151e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001522:	e00e      	b.n	8001542 <__swhatbuf_r+0x42>
 8001524:	466a      	mov	r2, sp
 8001526:	f000 f8bb 	bl	80016a0 <_fstat_r>
 800152a:	2800      	cmp	r0, #0
 800152c:	dbf1      	blt.n	8001512 <__swhatbuf_r+0x12>
 800152e:	9a01      	ldr	r2, [sp, #4]
 8001530:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001534:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001538:	425a      	negs	r2, r3
 800153a:	415a      	adcs	r2, r3
 800153c:	602a      	str	r2, [r5, #0]
 800153e:	e7ee      	b.n	800151e <__swhatbuf_r+0x1e>
 8001540:	2340      	movs	r3, #64	; 0x40
 8001542:	2000      	movs	r0, #0
 8001544:	6023      	str	r3, [r4, #0]
 8001546:	b016      	add	sp, #88	; 0x58
 8001548:	bd70      	pop	{r4, r5, r6, pc}
	...

0800154c <__smakebuf_r>:
 800154c:	898b      	ldrh	r3, [r1, #12]
 800154e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001550:	079d      	lsls	r5, r3, #30
 8001552:	4606      	mov	r6, r0
 8001554:	460c      	mov	r4, r1
 8001556:	d507      	bpl.n	8001568 <__smakebuf_r+0x1c>
 8001558:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800155c:	6023      	str	r3, [r4, #0]
 800155e:	6123      	str	r3, [r4, #16]
 8001560:	2301      	movs	r3, #1
 8001562:	6163      	str	r3, [r4, #20]
 8001564:	b002      	add	sp, #8
 8001566:	bd70      	pop	{r4, r5, r6, pc}
 8001568:	ab01      	add	r3, sp, #4
 800156a:	466a      	mov	r2, sp
 800156c:	f7ff ffc8 	bl	8001500 <__swhatbuf_r>
 8001570:	9900      	ldr	r1, [sp, #0]
 8001572:	4605      	mov	r5, r0
 8001574:	4630      	mov	r0, r6
 8001576:	f7ff fa57 	bl	8000a28 <_malloc_r>
 800157a:	b948      	cbnz	r0, 8001590 <__smakebuf_r+0x44>
 800157c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001580:	059a      	lsls	r2, r3, #22
 8001582:	d4ef      	bmi.n	8001564 <__smakebuf_r+0x18>
 8001584:	f023 0303 	bic.w	r3, r3, #3
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	81a3      	strh	r3, [r4, #12]
 800158e:	e7e3      	b.n	8001558 <__smakebuf_r+0xc>
 8001590:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <__smakebuf_r+0x7c>)
 8001592:	62b3      	str	r3, [r6, #40]	; 0x28
 8001594:	89a3      	ldrh	r3, [r4, #12]
 8001596:	6020      	str	r0, [r4, #0]
 8001598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800159c:	81a3      	strh	r3, [r4, #12]
 800159e:	9b00      	ldr	r3, [sp, #0]
 80015a0:	6163      	str	r3, [r4, #20]
 80015a2:	9b01      	ldr	r3, [sp, #4]
 80015a4:	6120      	str	r0, [r4, #16]
 80015a6:	b15b      	cbz	r3, 80015c0 <__smakebuf_r+0x74>
 80015a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80015ac:	4630      	mov	r0, r6
 80015ae:	f000 f889 	bl	80016c4 <_isatty_r>
 80015b2:	b128      	cbz	r0, 80015c0 <__smakebuf_r+0x74>
 80015b4:	89a3      	ldrh	r3, [r4, #12]
 80015b6:	f023 0303 	bic.w	r3, r3, #3
 80015ba:	f043 0301 	orr.w	r3, r3, #1
 80015be:	81a3      	strh	r3, [r4, #12]
 80015c0:	89a0      	ldrh	r0, [r4, #12]
 80015c2:	4305      	orrs	r5, r0
 80015c4:	81a5      	strh	r5, [r4, #12]
 80015c6:	e7cd      	b.n	8001564 <__smakebuf_r+0x18>
 80015c8:	08000841 	.word	0x08000841

080015cc <__malloc_lock>:
 80015cc:	4801      	ldr	r0, [pc, #4]	; (80015d4 <__malloc_lock+0x8>)
 80015ce:	f7ff ba09 	b.w	80009e4 <__retarget_lock_acquire_recursive>
 80015d2:	bf00      	nop
 80015d4:	2000008c 	.word	0x2000008c

080015d8 <__malloc_unlock>:
 80015d8:	4801      	ldr	r0, [pc, #4]	; (80015e0 <__malloc_unlock+0x8>)
 80015da:	f7ff ba04 	b.w	80009e6 <__retarget_lock_release_recursive>
 80015de:	bf00      	nop
 80015e0:	2000008c 	.word	0x2000008c

080015e4 <_free_r>:
 80015e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80015e6:	2900      	cmp	r1, #0
 80015e8:	d044      	beq.n	8001674 <_free_r+0x90>
 80015ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80015ee:	9001      	str	r0, [sp, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f1a1 0404 	sub.w	r4, r1, #4
 80015f6:	bfb8      	it	lt
 80015f8:	18e4      	addlt	r4, r4, r3
 80015fa:	f7ff ffe7 	bl	80015cc <__malloc_lock>
 80015fe:	4a1e      	ldr	r2, [pc, #120]	; (8001678 <_free_r+0x94>)
 8001600:	9801      	ldr	r0, [sp, #4]
 8001602:	6813      	ldr	r3, [r2, #0]
 8001604:	b933      	cbnz	r3, 8001614 <_free_r+0x30>
 8001606:	6063      	str	r3, [r4, #4]
 8001608:	6014      	str	r4, [r2, #0]
 800160a:	b003      	add	sp, #12
 800160c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001610:	f7ff bfe2 	b.w	80015d8 <__malloc_unlock>
 8001614:	42a3      	cmp	r3, r4
 8001616:	d908      	bls.n	800162a <_free_r+0x46>
 8001618:	6825      	ldr	r5, [r4, #0]
 800161a:	1961      	adds	r1, r4, r5
 800161c:	428b      	cmp	r3, r1
 800161e:	bf01      	itttt	eq
 8001620:	6819      	ldreq	r1, [r3, #0]
 8001622:	685b      	ldreq	r3, [r3, #4]
 8001624:	1949      	addeq	r1, r1, r5
 8001626:	6021      	streq	r1, [r4, #0]
 8001628:	e7ed      	b.n	8001606 <_free_r+0x22>
 800162a:	461a      	mov	r2, r3
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	b10b      	cbz	r3, 8001634 <_free_r+0x50>
 8001630:	42a3      	cmp	r3, r4
 8001632:	d9fa      	bls.n	800162a <_free_r+0x46>
 8001634:	6811      	ldr	r1, [r2, #0]
 8001636:	1855      	adds	r5, r2, r1
 8001638:	42a5      	cmp	r5, r4
 800163a:	d10b      	bne.n	8001654 <_free_r+0x70>
 800163c:	6824      	ldr	r4, [r4, #0]
 800163e:	4421      	add	r1, r4
 8001640:	1854      	adds	r4, r2, r1
 8001642:	42a3      	cmp	r3, r4
 8001644:	6011      	str	r1, [r2, #0]
 8001646:	d1e0      	bne.n	800160a <_free_r+0x26>
 8001648:	681c      	ldr	r4, [r3, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	6053      	str	r3, [r2, #4]
 800164e:	4421      	add	r1, r4
 8001650:	6011      	str	r1, [r2, #0]
 8001652:	e7da      	b.n	800160a <_free_r+0x26>
 8001654:	d902      	bls.n	800165c <_free_r+0x78>
 8001656:	230c      	movs	r3, #12
 8001658:	6003      	str	r3, [r0, #0]
 800165a:	e7d6      	b.n	800160a <_free_r+0x26>
 800165c:	6825      	ldr	r5, [r4, #0]
 800165e:	1961      	adds	r1, r4, r5
 8001660:	428b      	cmp	r3, r1
 8001662:	bf04      	itt	eq
 8001664:	6819      	ldreq	r1, [r3, #0]
 8001666:	685b      	ldreq	r3, [r3, #4]
 8001668:	6063      	str	r3, [r4, #4]
 800166a:	bf04      	itt	eq
 800166c:	1949      	addeq	r1, r1, r5
 800166e:	6021      	streq	r1, [r4, #0]
 8001670:	6054      	str	r4, [r2, #4]
 8001672:	e7ca      	b.n	800160a <_free_r+0x26>
 8001674:	b003      	add	sp, #12
 8001676:	bd30      	pop	{r4, r5, pc}
 8001678:	20000090 	.word	0x20000090

0800167c <_read_r>:
 800167c:	b538      	push	{r3, r4, r5, lr}
 800167e:	4d07      	ldr	r5, [pc, #28]	; (800169c <_read_r+0x20>)
 8001680:	4604      	mov	r4, r0
 8001682:	4608      	mov	r0, r1
 8001684:	4611      	mov	r1, r2
 8001686:	2200      	movs	r2, #0
 8001688:	602a      	str	r2, [r5, #0]
 800168a:	461a      	mov	r2, r3
 800168c:	f7fe ff04 	bl	8000498 <_read>
 8001690:	1c43      	adds	r3, r0, #1
 8001692:	d102      	bne.n	800169a <_read_r+0x1e>
 8001694:	682b      	ldr	r3, [r5, #0]
 8001696:	b103      	cbz	r3, 800169a <_read_r+0x1e>
 8001698:	6023      	str	r3, [r4, #0]
 800169a:	bd38      	pop	{r3, r4, r5, pc}
 800169c:	20000098 	.word	0x20000098

080016a0 <_fstat_r>:
 80016a0:	b538      	push	{r3, r4, r5, lr}
 80016a2:	4d07      	ldr	r5, [pc, #28]	; (80016c0 <_fstat_r+0x20>)
 80016a4:	2300      	movs	r3, #0
 80016a6:	4604      	mov	r4, r0
 80016a8:	4608      	mov	r0, r1
 80016aa:	4611      	mov	r1, r2
 80016ac:	602b      	str	r3, [r5, #0]
 80016ae:	f7fe ff38 	bl	8000522 <_fstat>
 80016b2:	1c43      	adds	r3, r0, #1
 80016b4:	d102      	bne.n	80016bc <_fstat_r+0x1c>
 80016b6:	682b      	ldr	r3, [r5, #0]
 80016b8:	b103      	cbz	r3, 80016bc <_fstat_r+0x1c>
 80016ba:	6023      	str	r3, [r4, #0]
 80016bc:	bd38      	pop	{r3, r4, r5, pc}
 80016be:	bf00      	nop
 80016c0:	20000098 	.word	0x20000098

080016c4 <_isatty_r>:
 80016c4:	b538      	push	{r3, r4, r5, lr}
 80016c6:	4d06      	ldr	r5, [pc, #24]	; (80016e0 <_isatty_r+0x1c>)
 80016c8:	2300      	movs	r3, #0
 80016ca:	4604      	mov	r4, r0
 80016cc:	4608      	mov	r0, r1
 80016ce:	602b      	str	r3, [r5, #0]
 80016d0:	f7fe ff37 	bl	8000542 <_isatty>
 80016d4:	1c43      	adds	r3, r0, #1
 80016d6:	d102      	bne.n	80016de <_isatty_r+0x1a>
 80016d8:	682b      	ldr	r3, [r5, #0]
 80016da:	b103      	cbz	r3, 80016de <_isatty_r+0x1a>
 80016dc:	6023      	str	r3, [r4, #0]
 80016de:	bd38      	pop	{r3, r4, r5, pc}
 80016e0:	20000098 	.word	0x20000098

080016e4 <_init>:
 80016e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016e6:	bf00      	nop
 80016e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ea:	bc08      	pop	{r3}
 80016ec:	469e      	mov	lr, r3
 80016ee:	4770      	bx	lr

080016f0 <_fini>:
 80016f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016f2:	bf00      	nop
 80016f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016f6:	bc08      	pop	{r3}
 80016f8:	469e      	mov	lr, r3
 80016fa:	4770      	bx	lr
